[
  {
    "path": "post/패키지-버전은-어떻게-작성해야할까/",
    "title": "패키지 버전은 어떻게 작성해야할까",
    "description": "시멘틱 버전의 의미와 현대적인 방식의 버전 관리 방식을 소개합니다.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2021-09-02",
    "categories": [
      "semver",
      "headver",
      "package",
      "version",
      "develop",
      "semantic-release"
    ],
    "contents": "\n\nPhoto by Jimmy Dean on Unsplash\n한줄요약\n\n버전 정책은 semver를 사용하되, 개발자가 필수로 사용하는 커밋메세지에 규칙을 정하여 자동화합니다.\n\n관련 논의를 함께 진행해주신 코딩맛집의 박찬성님 감사합니다.\n버전을 어떻게 하지?\n코드를 작성할 때 가장 고민하는 것은 이름을 짓는 것입니다. 하지만, 버전 변경을 정하는 것 또한 매우 큰 고민이기도 합니다. 제가 devops를 맡아서 배포 및 운영 책임을 가지면서 개발자들과 배포용 버전 관리에 대해서 많은 고민을 하고 있습니다. 많이들 semver를 사용하기는 합니다만, 실제 의미로 사용하기 보다는 기간적인 의미를 둘 때가 많습니다. 특히 릴리즈 주기를 지정하는 순간, 버전의 의미와 기간의 의미는 많이 섞이게 됩니다.\n저는 k8s를 사용하는 운영자로서 개발자와 빌드된 도커 이미지로 소통하기로 정했는데요. 그러다보니 도커 이미지의 태그가 매우 중요한 정보가 되었습니다. 그래서 개발 버전은 git의 short hash를, 이외에 사용을 위한 버전은 vsemver를 태그하여 태그 정보에 변경 부분을 작성하는 규칙을 정했습니다. 예를 들어 v1.1.3 버전을 배포해야 하는 것이면, 테스트를 거친 어플리케이션의 v1.1.3 버전 이미지를 배포하는 식이지요.\n그런데 이런 버전 정보를 본래의 의미에 맞게 올리는 것이 쉬운 일이 아니었습니다.\nsemver란?\n\nsemver의 의미를 설명하는 단락입니다. 충분히 이해하신다면 건너뛰어도 좋습니다.\n\nsemver는 오늘날 대부분의 조직에서 사용합니다. 전체 명칭은 Semantic Versioning 이고, 명세서(Specification)를 지칭하는 표현입니다.\n명세 전체는 공식 문서를 확인하는 것을 추천합니다.\n간단히 축약하면 X.Y.Z 의 형식을 따르는 버전 체계라고 할 수 있습니다. X는 주 버전(Major)으로 0으로 시작할 경우 개발 중임을, 그 이상의 숫자로 표현할 경우 각 버전 내에서 api 명세를 많이 변경하지 않을 것임을 뜻합니다. 0.~ 으로 시작하는 버전은 현재 개발중임으로 중간에 사용법이 자유롭게 바뀔 수 있다는 경고입니다. 대신 개발자에게 유지 책임에서 자유롭게함으로써 초기 개발상황을 반영한 정책이라고 볼 수 있습니다.\nZ는 수 버전(Patch)으로 api 명세의 변경 없이 버그 수정 등의 수정이 발생한 경우에만 올립니다. 앞선 버전이 변경될 시 0으로 초기화 합니다.\nY는 직전 버전의 api 명세는 그대로 사용할 수 있으나 Z 버전 업과는 다른 수준의 큰 변경이 있을 때 올립니다. 대표적으로 api 추가나 기존 api를 제거할 예정이라고 알리는 때를 들 수 있습니다. 내부적으로 대대적인 변경이 있을 때에도 api의 변경이 없더라도 올릴 수 있습니다. 예를 들면 의존하는 패키지의 변경이나 파라미터, 결과값에 컬럼이 추가되는 것 등을 들 수 있습니다.\nX는 기존 버전을 사용하는 코드를 변경해야만 하는 변화가 있는 경우 올립니다. 단순하게는 함수나 파라미터의 이름이 바뀌었거나 제거된 경우가 있습니다. 혹은 아예 사용 체계 자체가 바뀌는 경우도 주 버전을 올리는 이유입니다.\nsemver의 문제점\nsemver의 문제점은 여러 faq나 각 버전을 올리는 규칙을 공유함에도 불구하고, 각 개발자가 판단하는 버전업의 경계가 다르다는 것입니다. 특히 버전을 올리는 것을 각 개발자가 수동으로 수행하기 때문에 생기는 어려움도 발생하였습니다. 저의 경우, 주 버전을 기간에 맞추고 나머지 버전은 무시한채 식별자 변경으로 개발하는 것을 경험하기도 했습니다. 그만큼 변경점에 대한 판단과 버전 변경의 고민을 개발자에게 주면 생기는 문제가 발생하는 것이지요.\n주변 분들에게 질문해보니, 듣기 좋은 규칙을 하나 얻었습니다. 버그 수정은 수버전, 기능 추가는 부버전, 제거는 주버전을 올립니다. 큰 변경으로 주버전을 올리는 것은 논란이 되지 않으니 신경쓰지 않아도 되구요. * 관련 아이디어를 공유해주신 코딩맛집의 yongmin님 감사합니다.\n그럼에도 불구하고, 버전을 보는 사람으로 하여금 정보를 전달할 수 있는 방법을 찾는 것이 중요할 것입니다.\nheadver\n이런 문제를 해결하기 위해 line에서는 자체적으로 사용하는 headver를 구성하여 발표하기도 했습니다. headver는 수동 버전 관리의 문제와 여러 버전 체계의 혼란을 최소화하기 위해 주 버전 이외의 버전을 다른 자동화된 정보로 처리하였습니다. {주버전}.{년주}.{빌드번호}로 구성된 semver와 문법 호환하는 정책을 제안한 것인데요. 주 버전의 의미는 그대로 같고, yyww의 2자리 년도와 해당 주를 2자리수로 표현한 날짜, 같은 기간내 실행된 증가하는 빌드 번호로 구성합니다. 이렇게 하면 주 버전만 수동으로 관리하고, 나머지는 기간과 순서의 의미를 전달함으로써 버전이 일정 기간과 비슷하게 연결되는 점을 활용합니다. yyyyMMdd 가 아닌 이유는 자동증가하는 빌드 번호 덕분에 중간 기간 표현은 yyww로 충분하다고 합니다. 특히 스프린트를 진행하는 경우, 주단위 혹은 2주단위를 많이 사용하므로 개별 스프린트 단위를 표현할 수 있기도 합니다.\n주버전 조차도 공개 단위로 제안하고 있기도 합니다. 사용자에게 전달하는 타이밍에 주버전을 올림으로써 적극적으로 주 버전을 올리는 것은 제안합니다. 버전 변경의 고민을 최소화하려는 결정을 느낄 수 있었습니다.\n이렇게 하면 버전을 올리는 것에 대해 논의하는 시간을 줄일 수 있으며 충분히 소통하는 사람들 간에 정보를 전달할 수 있습니다.\n제가 가진 고민과 비슷한 문제를 해결하려는 노력을 확인할 수 있어서 매우 좋았습니다. 버전 관리의 자동화라는 아이디어를 얻을 수 있었던 점도 저에게 매력적이었구요.\ncalver\n최근 Rstudio 에서는 자사 사용 제품의 버전 체계를 calver(calendar-version)으로 전환한다고 공유하였습니다. calver는 {4자리년(yyyy)}.{2자리월(MM)}.{patch}로 구성합니다. 이 전환으로 블로그에서는\n바로 버전의 나이(?)를 확인할 수 있다.\n고객이 지원 서비스를 받는 기간을 이해하기 쉽다.\n새로운 기능을 추가할 것인지를 정하기 쉽다.\n는 장점을 내세웠습니다.\n이 버전 체계 변경의 목적을 고객 지원 기간을 정리하기 위해서라고 합니다.\n지원 기간은 리눅스나 nodejs에서의 정책때문에 익숙한 단어일텐데요. lts라는 장기 지원 버전과 단기 지원 버전을 번갈아 출시하는 정책을 가지고 있습니다.\nrust는 특이하게 년도별 edition을 제공하기도 합니다. 메인 버전은 장기 지원 체계를 유지하고, 매년 실험적인 기능을 년도별 edition에 담아 그 기간만 지원하는 정책입니다.\n두 지원 정책 모두 정기적인 릴리즈 계획과 더불어 정해진 기간동안 유지보수 및 지원하는 정책을 취함으로써 새로운 기능 테스트와 더불어 유지보수 리소스를 합리적으로 가져가기 위해 설계되었습니다.\nRstudio에서는 이번 버전 체계의 변화를 통해 아래와 같은 지원 정책을 취합니다. latest 버전은 기간과 상관없이 지원하고, 과거 버전의 경우 calver 기준 18개월 까지만 지원합니다. 지원 정책 문서에 이러한 내용이 업데이트되었고, 관련한 공유를 블로그로 한 것 같습니다.\n이렇게 지원 정책과 버전을 이해하기 쉽게 일치시킴으로써 버전에 노출되는 사람에게 전달하는 정보가 강조되는 효과가 있습니다. 다른 버전 체계와 비교하자면, 년.월 정보의 주버전과 patch의 자동화 가능한 수버전이 특징이라 볼 수 있습니다. headver와 같이 주버전을 하나만 관리하되 그것 조차 년월로 취급하여 배포 타이밍을 이름으로 사용하였습니다.\n특히 많은 프로젝트가 릴리즈 주기를 가지고 있다는 점에서, 그리고 주기 단위로 주, 부 버전을 올리는 계획을 세운다는 점에서 calver는 더욱 사용자 지향적 버전 체계라는 생각이 들었습니다.\nbnver\n저 나름대로 새로운 버전 체계를 생각해보게 되었습니다. 물론 headver처럼 semver 호환까지는 고려하지 못했지만, 버전에 개발자와 운영자에게 유용한 정보를 담으면 좋겠다고 생각했습니다. bnver는 Branch Name Version 이란 뜻입니다. 구성은 {Branch Name}.{yyyyMMdd}.{git short hash} 입니다. 이렇게 하면 브랜치 이름으로 개발 버전인지, 새로운 관리 버전인지, main 버전인지를 전달할 수 있습니다. yyyyMMdd는 보시는 바와같이 날짜입니다. yyww는 개인적인 감상으로는 가독성이 떨어진다 느꼈습니다. 지금이 몇째주 이지? 라는 걸 주단위 스프린트 같이 사용해야지만 쉬운 방식이라 생각했거든요. 더 범용으로 사용하기에는 년월일 방식이 효과적이라 생각했습니다. git short hash는 아직 고민이 많습니다. 빌드 시스템들이 파이프라인이 트리거링된 git hash 정보를 전달하는 경우가 많기 때문에 쓸모가 없다 싶다가도, 운영자 입장에선 현재 배포된 서비스가 기대하는 버전이 맞는지 확인하는데 중요한 정보라고 생각합니다.\nbnver의 장점이라면 모든 버전이 자동으로 동작하며, 개발자가 신경써야 할 부분은 빌드 파이프라인이 어떤 브랜치를 받아서 동작하는지 입니다. 이미 브랜치를 분리하여 작업하는 워크플로우가 광범위하게 사용되고 있기 때문에 변경없이 사용할 수 있습니다.\n단점이라면 api 호환성에 대한 정보가 전혀 없다는 점 입니다. 호환성 정보를 전달하기 위한 방법이 없는 것은 아닙니다. main 브랜치를 mainv1이나 v1 등으로 변경해서 사용하면 됩니다. 이 정도 변경이라면 사용하기 어려울 수 있겠다 싶긴 합니다.\n개발자에게 여러 자유도를 허락하면서 운영자에게 정보를 전달하는 방법으로 생각해 보았습니다.\n다시 semver\nsemver의 본래 문제로 돌아가 봅시다. 3단계의 버전을 가지고 있으며 각 버전을 개발자가 수동으로 관리한다는 것이 큰 문제입니다. headver는 수동 관리용 버전을 1개로 줄이고, 그 조차도 간단한 정책을 취함으로써 소모적인 논쟁을 해결합니다. bnver는 개발자와 운영자 사이의 정보 전달과 모든 버전 자동화를 목표로 설계하였습니다. 물론 브랜치를 관리하는 것 자체가 수동이긴 하지만, 개발자의 작업 흐름에 사용되는 동작을 활용한다는 점이 자동의 의미를 유지합니다. 그럼 semver의 가장 큰 문제는 실제 코딩에서의 변경에 대한 의미를 판단하여 개발자가 수동으로 관리한다는 점이라 할 수 있겠습니다.\nsemver를 자동으로 작성할 수 있다면, 그럼 문제가 해결되는 걸까요?\nsemantic-release\nsemantic-release-action을 소개해주신 코딩맛집의 Mo Kweon님 감사합니다.\nsemver를 자동화하려면 어떻게 하면 좋을까요? bnver가 가진 아이디어를 활용할 수 있을 것 같습니다. 개발자의 워크플로우내에서 semver를 조정할 수 있는 정보를 받아서 자동으로 동작해주면 됩니다. 가장 간단하게는 코드 변경분을 보고 semver의 어느 버전을 변경할지를 정하면 되는 것이지요. 규칙을 정하면 가능할 것도 같으면서도 어렵다는 느낌이 듭니다.\n우선 개발자의 워크플로우에 항상 사용되는 것이 무엇인지 부터 살펴보면 좋을 것 같습니다. 필수 단계라고 하면 2가지를 생각할 수 있습니다. 위에 언급한 코드 그 자체가 1번이고, 두번째는 커밋 메세지 입니다.\n본 단락의 제목인 semantic-release는 정형화된 커밋 메세지를 활용하여 semver를 자동으로 작성해 줍니다.\n예를 들면 커밋 메세지에 BREAKING CHANGE 라는 글자가 있다면 주버전을 올리는 식입니다.\n이 접근은 semver의 많은 부분을 해결하면서, 개발자에게 버전의 논란을 많이 줄일 수 있는 방식입니다. 개발자는 버그 수정, hotfix, api 개선 등 실제로 작업한 내용을 바탕으로 커밋 메세지를 작성하면 됩니다. 미리 정의한 커밋 활동의 카테고리를 팀 내에서 합의를 하고, 그리고 그 합의된 활동 이름이 각 semver 버전에 연동하는 것으로 작동합니다.\n이렇게 하면 개발자가 집중해야 할 것과 그것을 노출하는 방식을 분리하여 논의점을 대표화할 수 있습니다. 예를 들어 어떤 커밋이 발생할 때 자신이 작업한 내용이 어떤 카테고리에 속하는지는 이슈 생성때 부터 논의하거나 정할 수 있습니다. 버전 그 자체는 개발자가 신경쓸 필요가 없는 것이지요. 예를 들어 semantic-release-action은 breaking이나 revert라는 글자가 있다면 각각 주버전과 수버전을 올리는 규칙이 기본으로 들어가 있습니다. 유명한 몇 가지 프로젝트에서 사용하는 관례도 선택할 수 있게 되어 있습니다. 이 부분을 그대로 사용해도 좋고, 팀 내에서 사용할 관례를 정하는 것도 좋은 것 같습니다. 논의점을 대표화한다는 말의 뜻이기도 합니다. 어떤 단어가 커밋 메세지에 있으면 어떤 버전을 올린다는 논의를 대표적으로 한번만 하게 함으로써 개별 커밋때 논의할 내용을 대표적으로 논의할 수 있게 되었습니다.\n웹 페이지에 html 이 내용과 디자인으로 분리한 것처럼 커밋메세지와 버전표현을 분리함으로써 자동화를 달성한 것이지요.\n깃헙 액션인 semantic-release-action의 접근이 공개 버전을 사용하는 프로젝트에서 사용할 수 있는 최선의 선택이지 않나 싶습니다. 이 깃헙 액션은 버저닝의 고민을 커밋메세지로 전환하고, 커밋 메세지를 잘 작성하는 것을 독려하는 효과가 있습니다. 그리고 개발자는 태그가 무엇인지, 릴리즈가 무엇인지 신경쓰지 않을 수 있게 됩니다.\n깃의 많은 부분이 자동화보다는 명시적인 동작으로 구성된 것을 생각하면, semantic-release-action는 큰 자동화 규칙이라고 할 수 있습니다. 당장 태그가 무엇인지 몰라도 된다는 점이 참 마음에 듭니다. 브랜치 전략과도 완전히 분리된 정책을 취하는 것도 중요한 설계 관점이라고 생각합니다.\n배포 담당자로써 무엇이 좋은가?\n사실 배포 담당자는 명시적인 버전이기만 하다면 나머지는 작은 문제일 수 있다고 생각합니다. 다만 광범위하게 퍼져있는 semver를 자동화를 통해 자체가 가진 문제를 해결할 수 있다면 가장 효과적이겠다 생각하고 있습니다. headver는 결국 버전을 3개에서 1개로 단순화함으로써 문제를 해결한 것이라고 생각이 들구요. bnver 또한 비슷한 전략입니다만, 그 조차 개발자의 깃 워크플로우에 의존하게 함으로써 자동화에 초점을 맞춘 것이라 생각합니다. 가장 큰 단점으로 main 브랜치라는 그간의 관례를 버려야 할 수도 있는 결정이라는 점이라 어떻게 하는게 좋을지 고민하게 되었습니다. 이때 semver의 자동화가 가장 합리적인 선택이라는 생각이 듭니다. 물론 팀내에 어떤 커밋 활동이 있는지 카테고리를 정하고, 각 카테고리를 어떤 semver 버전을 올리는데 사용할지를 정해야 하긴 합니다만, 이 부분의 의사 결정을 중앙화함으로써 발산해버릴 논의를 빠르게 끝내고 활용할 수 있다는 장점이 있습니다.\nR 패키지 개발에서 어떻게 사용하면 좋을까?\n그대로 사용해도 좋다고 생각합니다. 다만 usethis 패키지와 pkgdown 패키지의 활성화로 NEWS.md 작성이 보편화된 상황인데요. 이 부분까지 커밋 메세지로 자동화하는 것이 어떤가 하는 생각이 들었습니다.\n명시적으로 작성하길 선호한다면, 최소한 NEWS.md와 github release가 동기화되는 정도는 필요하다 생각이 드네요. 한번 r-lib의 action 패키지에 example로 제안해 봐야겠습니다.\n긴 글 읽어주셔서 감사합니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/131734519-de76f53d-30c4-4bd5-9e9b-9fc46f6614e8.jpg",
    "last_modified": "2022-04-05T15:14:05+00:00",
    "input_file": {}
  },
  {
    "path": "post/KoNLP-설치-방법/",
    "title": "KoNLP 설치 방법",
    "description": "install.packages(\"KoNLP\", \n  repos = c(\"https://forkonlp.r-universe.dev\",\"https://cloud.r-project.org\"),\n  INSTALL_opts = c(\"--no-multiarch\")\n)",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2021-06-01",
    "categories": [
      "KoNLP",
      "install",
      "install.packages",
      "R-universe"
    ],
    "contents": "\n\nContents\n1. jdk 설치\n2. KoNLP 설치\n전체 코드\n조심해야 할 점\n\n\nKoNLP는 한국어 형태소 분석 R 패키지입니다. KoNLP 패키지는 java로 제작된 한나눔 형태소 분석기를 사용합니다. java를 사용하기 때문에 크게 2가지 단계로 패키지 설치를 진행합니다. jdk란 자바 개발 킷의 줄임 표현으로 자바 언어를 사용하기 위해 설치하는 프로그램입니다.\njdk 설치\nKoNLP 패키지 설치\njdk의 설치는 원래 어려웠습니다. KoNLP 패키지가 2020년 2월 1일부로 cran에서 내려가서 설치가 어려워졌습니다. 두 단계 모두 접근하기 좋은 방법을 소개합니다.\n1. jdk 설치\njdk 설치는 확인과 설치 단계로 진행합니다.\n1.1 jdk 설치 확인\n기존에 잘 동작하는 jdk가 설치되어 있는지 확인합니다. 확인은 rJava 패키지의 초기화 함수를 사용합니다. rJava 패키지는 R에서 자바 프로그램을 사용하기 위한 패키지입니다.\ninstall.packages(\"rJava\")\n초기화 함수로 설치되어 있는지 확인합니다.\nrJava::.jinit()\n[1] 0\n0 이라는 출력이 없을 수도 있습니다. 위 함수를 실행하고 에러가 없다면, jdk가 잘 설치되어 있는 것입니다. 그러니 jdk 설치 단계를 건너서 2. KoNLP 설치 단계로 가세요.\n1.2 jdk 설치하기\njdk를 설치하기 위해 multilinguer 패키지를 사용합니다. jdk는 다운로드하고, 설치하고, 실행 경로를 등록하는 과정으로 설치합니다. multilinguer 패키지는 jdk를 설치하는 복잡한 과정을 대신해줍니다.\ninstall.packages(\"multilinguer\")\nmultilinguer::install_jdk()\n\nmultilinguer::install_jdk() 을 실행하면 R 새션을 재시작합니다.\n\n\nmac 사용자라면 설치 경로 권한을 얻기 위해 비밀번호를 입력하라고 합니다.\n\njdk 설치 확인을 한번 더 해보고, 동작하면 아래 KoNLP 설치 과정으로 넘어갑니다.\n2. KoNLP 설치\n아래 코드로 KoNLP 패키지를 설치하세요.\ninstall.packages(\"KoNLP\", \n    repos = c(\"https://forkonlp.r-universe.dev\",\n              \"https://cloud.r-project.org\"),\n    INSTALL_opts = c(\"--no-multiarch\")\n  )\n이제 사용해서 잘 동작하는지 확인하겠습니다.\nlibrary(\"KoNLP\")\nSimplePos09(\"안녕하신가요?\")\n$안녕하신가요\n[1] \"안녕/N+하/X+시ㄴ가/E+요/J\"\n\n$`?`\n[1] \"?/S\"\n설명\n현재 KoNLP 패키지는 CRAN에서 내려가 있는 상태입니다. 그래서 다른 패키지 저장소인 r-universe.dev에 빌드에서 업로드를 해둔 상태입니다. r-universe.dev는 사설 패키지 저장소라고 보시면 될 것 같습니다.\n그래서 install.packages() 명령에 추가 저장소 주소를 더하는 줄을 추가하였습니다. 다른 패키지들은 기본 CRAN을 사용하므로 함께 작성하였습니다. 패키지 설치시 32비트와 64비트를 모두 설치하는 것이 기본 동작인 듯합니다. 현재 java 64bit 만 설치되어 있으므로 기본 64bit 패키지만 설치하라는 옵션을 추가했습니다.\n전체 코드\n설치만 진행하는 전체 코드를 정리합니다. 꼭 한 줄 씩 실행해주세요.\ninstall.packages(\"multilinguer\")\nmultilinguer::install_jdk()\ninstall.packages(\"KoNLP\", \n    repos = c(\"https://forkonlp.r-universe.dev\",\n              \"https://cloud.r-project.org\"),\n    INSTALL_opts = c(\"--no-multiarch\")\n  )\n조심해야 할 점\nmultilinguer 패키지의 install_jdk() 함수는 기존에 jdk가 설치되어 있는지 등을 확인하지 않습니다. 환경 변수를 건드리는 동작이 있기 때문에 기존에 설치된 부분이 꼬여서 동작하지 않을 수 있습니다. 혹시 문제가 발생하면 패키지 이슈에 알려주세요.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/120210866-3a47b800-c26b-11eb-928e-f980c286a03d.jpg",
    "last_modified": "2022-04-05T15:16:54+00:00",
    "input_file": {}
  },
  {
    "path": "post/distill로-옮깁니다/",
    "title": "distil로 옮깁니다",
    "description": "드디어 블로그를 단순하게 유지하기 위해 distill로 옮깁니다.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2021-01-28",
    "categories": [],
    "contents": "\n\nContents\nblogdown의 대안을 찾아서\ndistill 소개\n\n\nblogdown의 대안을 찾아서\nblogdown은 꽤 오랫동안 사용한 블로그 패키지다. 여전히 좋은 패키지라고 생각한다. blogdown 또한 rstudio에서 관리하며, 최근 버전 1.0.0 을 출시했다.\n대안이 필요한 이유는 blogdown 자체의 문제만은 아니지만, 여전히 문제다.\n한글 윈도우 rstudio 에서 빌드시 경로 문제가 발생할 때가 있다.\n캐쉬 동작을 이해하지 못해서 빌드 결과가 다르다.\nrstudio가 글 작성 도구로써 매우 좋다고 할 수 없다.\nrstudio가 글 작성 도구로써 매우 좋다고 할 수 없는 이유는, 우선 매우 무겁기 때문이다. 오죽하면 Rmd 전용 글 작성 도구만 따로 만들까 고민하던 적이 있기도 하다.(지금도 유효하다.)\ndistill 소개\ndistill 은 rstudio 의 패키지로 동명의 논문 사이트인 distill의 출력 포멧을 기준으로 만든 블로그 패키지다.\n\nDistill for R Markdown is based on the Distill web framework, which was originally created for use in the Distill Machine Learning Journal. Distill for R Markdown combines the technical authoring features of Distill with R Markdown, enabling a fully reproducible workflow based on literate programming.\n\n패키지에서 소개하는 강점은 아래와 같다.\n모바일 최적화\n기술 문서 작성을 위한 기술들(ex> LaTeX, footnotes)\n유연한 그림 출력\n유연한 테이블 출력\n블로그와 웹사이트 구조 지원\n사용하면서 느낀 장점은 많은 표준 도구를 도입하여 편리하다.\n댓글, google analytic 붙이기, 쿠키 허용 팝업, 라이선스 명시가 설정으로 해결된다. 아주아주아주아주 좋았다.\n아직 해결해야 하는 건 에드센스 붙이는거다. 얼마 되지도 않는 광고 수입이 들어오지도 않고 있는 상태다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/119273060-17524e00-bc44-11eb-9d8a-e7feb5063005.png",
    "last_modified": "2022-04-05T15:16:58+00:00",
    "input_file": {}
  },
  {
    "path": "post/correttor-r을-위해서-java를-설치해보자/",
    "title": "[correttor] R을 위해서 JAVA를 설치해보자",
    "description": "`multilinguer::install_java()`를 쓰세요.(MacOS는 컴퓨터 비밀번호가 필요)",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2019-08-10",
    "categories": [
      "R",
      "java",
      "rJava",
      "package",
      "correttor"
    ],
    "contents": "\n\n한줄요약\nmultilinguer::install_java()를 쓰세요.(MacOS는 컴퓨터 비밀번호가 필요)\n앞서 R에서 python을 설치해서 사용하기 위해 conda를 설치하는 방법을 살펴봤습니다. 이번에는 java입니다.(두둥)(엄근진)\njava를 설치하기 위해서 corretto 배포판을 선택했습니다. corretto 배포판의 설치를 지원하는 correttor 패키지는 Windows 32 bit, 64 bit, MacOS를 지원합니다.\nconda4r 패키지와 마찬가지로 correttor 패키지는 multilinguer 패키지군의 일원입니다.\nmultilinguer 패키지가 직접 인스톨 코드 등을 가지도록 개발하고 있습니다.\n이 포스트는 두말 않고 진행해보겠습니다.\n\n\n# install.packages(\"remotes\")\nremotes::install_github(\"mrchypark/multilinguer\")\nlibrary(multilinguer)\ninstall_java()\n\n\n\ninstall_java() 함수의 목표는 rJava를 설치하여 문제 없이 동작하게 만드는 것입니다. install_java() 함수는 현재 컴퓨터에 java가 설치되어 있는지 확인합니다. 없다면 설치를 시작합니다. Windows 에서는 사용자 계정 별 폴더에 corretto 폴더를 만들고 저장합니다. 그리고 유저 환경변수를 설정합니다. MacOS 에서는 /Library/Java/JavaVirtualMachines/ 경로에 java11 버전으로 명시하여 저장합니다. 말씀 드린 것 처럼, MacOS는 앞의 위치에 설치하기 위해서 컴퓨터 비밀번호가 필요합니다. 문제있는 동작은 없으니 걱정되시면 소스를 확인해 주세요.\n앞의 설치는 마지막에 재시작을 하고 rJava 패키지를 binary로 설치한 후 다시 재시작합니다. .jinit() 함수를 수행하면서 마무리를 하기 때문에 문제가 있다면 이 단계에서 에러를 출력합니다. 혹시 에러가 발생하면 꼭 알려주세요.\n위 설치로 바로 사용해 볼 수 있는 패키지는 역시 KoNLP 입니다.\n\n\ninstall.packages(\"KoNLP\")\nlibrary(KoNLP)\n\n\n\n## Checking user defined dictionary!\n위 메세지가 실행된다면, 자바를 사용하는 R 패키지를 문제없이 사용할 수 있는 상태가 되었다는 뜻입니다.\n현재 MacOS에서 R 버전이 3.5.X 버전일 때 문제가 있는 것을 파악했습니다.\ncorrettor 패키지 개발에 도움을 주신 많은 분들께 다시 한번 감사드립니다. 빨리 여러 곳에서 안정적으로 동작하는 패키지가 되도록 노력하겠습니다. 감사합니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106564199-45663200-6570-11eb-894c-d89fa3c860f4.png",
    "last_modified": "2022-04-05T15:16:57+00:00",
    "input_file": {}
  },
  {
    "path": "post/conda4r-r을-위해서-conda를-설치해보자/",
    "title": "[conda4r] R을 위해서 conda를 설치해보자",
    "description": "`multilinguer::install_conda()`를 쓰세요. (응?)",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2019-07-31",
    "categories": [
      "R",
      "python",
      "reticulate",
      "conda",
      "conda4r",
      "package"
    ],
    "contents": "\n\nContents\nconda4r 패키지 개발을 중단합니다.\n\n\nconda4r 패키지 개발을 중단합니다.\nreticulate 패키지에 install_miniconda() 함수가 포함되기로 결정되어서 패키지 개발을 중단합니다.\nmultilinguer 패키지의 install_conda() 함수는 reticulate 패키지의 함수를 사용하는 것으로 변경 중입니다.\n블로그 내의 함수 동작도 우선은 전부 멈춰두었습니다. 이후 reticulate 패키지의 cran 버전에 포함되면 위 이야기대로 동작하도록 하겠습니다.\n한줄요약\nmultilinguer::install_conda()를 쓰세요. (응?)\nconda는 다양한 언어를 위한 패키지 매니저로 개발중입니다. anaconda로 익히 알려지면서 python 배포판의 일종으로 쓰이고 있습니다. 최근 파이썬은 딥러닝 프레임워크들의 인기에 힘입어 많은 사람들의 관심을 받고 있습니다. 개발과 연구라는 두 마리 토끼를 잡기 위해서 많은 프레임워크가 파이썬으로 개발되었습니다.\n이런 환경에서 R은 취약한 자체적인 프레임워크를 해결하기 위해 python을 품는 결정을 합니다. 그 결과로 나온 부산물이 reticulate 패키지입니다. Rstudio 팀은 tensorflow와 keras를 이용하기 위해서 reticulate 패키지를 개발합니다. 이는 놀라운 생산성으로 이어졌습니다. R 패키지는 python 패키지에서 api 변경만 따라가면 되는 상황이 되었습니다. 내부 로직을 전부 python 패키지에 위임함으로써 R 패키지의 유지보수관리에 혁신적인 효율성을 확보한 셈이죠.\n이 때 중요하게 권장하는 사항이 conda 패키지 매니저를 사용하는 것입니다. 헌데 R 사용자에게 다른 개발 언어를 설치하는 것은 어려운 일일 수 있습니다. 그 중에 conda 패키지 매니저는 매우 쉬운 축에 속합니다…만, 뭔가 화면 하나하나, 옵션 하나하나 어떤 것인지 아는 것은 확실히 어려운 일입니다. 그런거 다 알꺼면 왜 R로 스크립팅하나요…\n그래서 conda4r 패키지를 준비했습니다. conda4r 패키지는 Windows 32bit, 64bit, MacOS, Linux를 지원하는 miniconda를 설치하는 함수를 제공합니다.\n설치 방법\nconda4r 패키지는 R 사용자를 위한 다른 개발 언어 설치를 지원하는 프로젝트인 multilinguer 패키지군의 일원입니다. conda4r 패키지는 인프라로써 설치를 위한 개별 함수들을 제공합니다. multilinguer 패키지는 has_conda() 함수를 제공합니다. has_conda() 함수는 제가 할 수 있는 한의 테스트를 통해서 conda가 동작하는 상태를 만드는 것을 목표로 합니다.\n\n\n# install.packages(\"remotes\")\nremotes::install_github(\"mrchypark/multilinguer\")\n\n\n\n사용법\n위에 설명드린 대로 has_conda() 함수를 실행하면 끝입니다.\n\n\nlibrary(multilinguer)\nhas_conda()\n\n\n\n그럼 기존에 설치된 conda가 있는지 확인합니다. 있으면 그대로 종료, 아니라면 conda 설치를 시작합니다. 우선 다운로드 받고, 표준 경로에 miniconda를 설치합니다. Windows에서 ssl 관련된 문제가 있어 수정합니다. 그리고 conda 버전을 업데이트 합니다. 버전 업데이트를 진행하고 싶지 않다면 update 옵션을 FALSE를 주면 됩니다. 잘 됬는지 확인하기 위해 conda를 사용하는 패키지를 설치, 실행해 보겠습니다.\n\n\nremotes::install_github(\"haven-jeon/KoSpacing\")\n\n\n\nKoSpacing 패키지는 KoNLP 패키지의 개발자이신 고감자님이 만든 띄어쓰기 패키지입니다. python의 keras 패키지를 사용하기 때문에, 패키지를 사용하기 위해서 reticulate 패키지와 conda가 필요합니다.\n\n\nlibrary(KoSpacing)\n\n\n\nKoSpacing 패키지는 버전이 0.1.1 이상인지 꼭 확인하셔야 합니다. 이전 버전은 설치에 문제가 있어서 동작하지 않습니다.\n\n\npackageVersion(\"KoSpacing\")\n\n\n\nKoSpacing 패키지의 설치에서는 conda가 필요하지 않습니다만, library(KoSpacing)을 실행시 나오는 안내 문구처럼 set_env() 함수를 실행할 때 필요합니다. 앞서 has_conda()를 잘 실행하셨다면 이제 set_env() 실행할 때 문제가 생기지 않으면 좋을 것 같습니다.(응?)\n\n\nset_env()\n\n\n\n아마 위에 함수가 잘 끝나면 세션을 재시작할 것입니다. 이제 동작을 확인해보겠습니다.\n\n\nlibrary(KoSpacing)\nspacing(\"김형호영화시장분석가는'1987'의네이버영화정보네티즌10점평에서언급된단어들을지난해12월27일부터올해1월10일까지통계프로그램R과KoNLP패키지로텍스트마이닝하여분석했다.\")\n\n\n\n2019-08-10 03:28:32.102292: I T:\\src\\github\\tensorflow\\tensorflow\\core\\platform\\cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2\nloaded KoSpacing model!\n[1] \"김형호 영화시장 분석가는 '1987'의 네이버 영화 정보 네티즌 10점 평에서 언급된 단어들을 지난해 12월 27일부터 올해 1월 10일까지 통계 프로그램 R과 KoNLP 패키지로 텍스트마이닝하여 분석했다.\"\n첫 실행 이후에는 위 메세지 없이 결과만 출력합니다.\n잘 동작하시나요? 혹시라도 안되시는 분들은 댓글로 남겨주시면 감사하겠습니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106564003-fe783c80-656f-11eb-948f-7896c100b4db.png",
    "last_modified": "2022-04-05T15:24:28+00:00",
    "input_file": {}
  },
  {
    "path": "post/josaplay-rmd로-만드는-한글-보고서의-친구/",
    "title": "[josaplay] Rmd로 만드는 한글 보고서의 친구",
    "description": "`을(를)` 이 눈에 거슬린다면 `josaplay`가 문제를 해결해 줄 겁니다.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2019-05-15",
    "categories": [
      "R",
      "josaplay",
      "package",
      "Rmd"
    ],
    "contents": "\n\n한줄요약\n을(를) 이 눈에 거슬린다면 josaplay가 문제를 해결해 줄 겁니다.\n개인적인 일들이 많이 있어서 정신을 못차리고 있는 중입니다. 데이터홀릭을 계속하는 만큼, R코홀릭도 좀 어떻게 해야할텐데 말이죠. 그동안 정기 보고서를 만들 때 한글만의 문제를 해결하는 패키지가 없어서 벼르고만 있었습니다만, 드디어 만들었습니다!\n이름하야 josaplay 패키지입니다.\n혹시 마우스을(를) 선택하셨습니다. 같은 멘트를 보신 적이 있으신가요? 앞의 단어가 어떤 것이 올지 결정나지 않았을 때, 그에 붙을 조사 또한 결정나지 않습니다. 위와 같이 경우를 다 작성해두는 선택을 한 사람들이 참 많습니다.\njosaplay 패키지는 이 때, 앞 단어의 마지막이 모음인지 자음인지를 보고 을/를 중 선택하여 출력해 줍니다.\n설치는 아래 코드를 사용하면 됩니다.\ninstall.packages(\"josaplay\")\n코드가 동작하는 것을 살펴볼까요?\n\n\nlibrary(josaplay)\n\njsp_gwawa(\"상품\")\n\n\n[1] \"상품과\"\n\njsp_gwawa(\"텀블러\")\n\n\n[1] \"텀블러와\"\n\njsp_eunneun(\"사랑\")\n\n\n[1] \"사랑은\"\n\njsp_eunneun(\"탁자\")\n\n\n[1] \"탁자는\"\n\njsp_iga(\"고객\")\n\n\n[1] \"고객이\"\n\njsp_iga(\"모니터\")\n\n\n[1] \"모니터가\"\n\njsp_eulleul(\"패키지\")\n\n\n[1] \"패키지를\"\n\njsp_eulleul(\"컵\")\n\n\n[1] \"컵을\"\n\njsp_iga(\"145\")\n\n\n[1] \"145가\"\n\njsp_iga(\"k146\")\n\n\n[1] \"k146이\"\n\n그럼 어떻게 쓰면 좋을까요? Rmd로 보고서 등을 작성할 때, 위처럼 코드청크를 사용하는 것이 아닌 경우가 있습니다. 백틱(`)을 하나만 사용하는 형식으로 인라인 코드를 작성할 수 있는데요. 이때 josaplay가 힘을 발휘합니다.\n\n\ndata1 <- \"병아리\"\n\n\n\n\n병아리이(가) 성장하였습니다.\n\n라고 작성하는 것을\n\n병아리가 성장하였습니다.\n\n로 고치면 data1의 글자에 따라 적절한 이/가를 선택해 출력해줍니다.\n앞으로 진행할 프로젝트에 적용할 생각을 하니 너무 즐겁네요. 한글이 들어간 자동화 보고서를 생성할 때 꼭 필요한 인프라 패키지를 만들게 되서 영광입니다.\n현재 josaplay는 4개의 함수에 완성형 한글과 숫자를 커버합니다. 자음 모음의 한글이나 영어, 특수문자는 아직 동작하지 않습니다. 영어 알파벳 발음에 대응하는 것은 필요한 일 같다는 생각이 듭니다.\n문의나 질문 사항은 언제나 환영합니다. 댓글로 문의 주시면 제가 할 수 있는 최대로 답변드리도록 노력하겠습니다. 감사합니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106563544-43e83a00-656f-11eb-9629-f220d82e2792.png",
    "last_modified": "2022-04-05T15:17:00+00:00",
    "input_file": {}
  },
  {
    "path": "post/python과-r-어떤-걸-공부-해야-할까/",
    "title": "Python과 R 어떤 걸 공부 해야 할까",
    "description": "무엇이든 빨리 배울 수 있는 것으로 시작하세요.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2019-03-20",
    "categories": [
      "R",
      "Python"
    ],
    "contents": "\n\n원글\n당신이 학생이라면, 회사에 들어가기 전에 충분히 숙달할 시간과 자신이 있다면 아무거나 해라. 두 언어 모두 기계의 효율성보다는 사람의 생산성을 우선하는 언어다.\n당신이 취업을 앞둔 학생이라면, Python을 해라. 어떤 직업이 되었건 R만 특화하여 명시적으로 뽑는 자리는 없지만, 반대는 매우 많다.\n당신이 직업이 있다면, 개발일이 더 적성에 맞는 것 같다면 Python을 배워라. Python은 범용 개발언어로서 당신이 Python을 할 줄 안다면 결국 개발자에 가까운 일을 하게 될 것이다.\n당신이 하는 일에 개발에 개자도 끼지 않을 것 같았는데, 그럴 기미가 보인다면 R을 공부해라. R은 그 어떤 언어보다도 직관적으로 이해하는 것을 중시한다. 평생 개발일은 안할 것같지만 업무에 30-40퍼센트 미만으로 필요할 것 같다면 R은 적은 시간을 공부하고도 많은 시간 공부한 것 같은 효과를 줄 것이다.\n당신이 머신 러닝 프로젝트를 많이 해야한다면 미안한 말이지만 둘다해라. 데이터를 다루는데는 R이, 머신러닝 모델 개발에는 Python이 좋다. 물론 지금 그렇다는거다. 미래를 보건데 충분한 지원을 받는 좋은 패키지는 거의 모든 언어에서 사용하는걸 목표로 한다. 대표적인 것이 xgboost 이다. 모두 해보고 마음가는걸 메인, 아닌걸 서브로 공부해라.\n당신이 딥러닝을 연구할 계획이라면 이 조언이 필요치 않다.\n당신이 딥러닝을 활용해보려면 R을 해라. R에는 이미 훌륭하게 Keras 패키지가 좋은 회사의 지원을 받으며 성장하고 있다. 왜 Python이 아니냐고 묻는다면 Python을 해야하는 사람들은 이미 스스로 판단할 능력을 가지고 있다.\n당신이 개발자라면 어떤 경우에서건 Python을 해라. 위에서 언급했듯 R은 직관에 가까운 언어기때문에 이미 다른 문법에 익숙해져 있다면 R은 괴상한 문법 체계인 것처럼 느껴질 것이다.\n당신이 숫자를 다루는 일을 한다면 R을 배워라. 어떤 언어든 부동소수점 문제나 다른 연산등의 문제에서 자유로울수 없지만, R은 참 많은 고려가 되어 있다.\n당신옆에 개발자가 있다면 위의 모든 것을 무시하고 Python을 배워라. 질문에 대답을 들을 수 있는 환경은 그 어떤 것보다 강력하다.\n페이스북에서 흥한 김에 기록용으로 포스트합니다.\n어떤 내용의 댓글도 환영합니다. 감사합니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106563355-ff5c9e80-656e-11eb-84e0-439b14c1b9c1.png",
    "last_modified": "2022-04-05T15:17:03+00:00",
    "input_file": {}
  },
  {
    "path": "post/2018년-회고/",
    "title": "2018년 회고",
    "description": "첫 목표가 건강이었지만 다른 일을 너무 많이 벌린거 같습니다.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2019-01-04",
    "categories": [
      "blog",
      "retrospect"
    ],
    "contents": "\n\n벌써 1월이 되어 2019년입니다. 회고라는 걸 해봐야지 라고 생각하고 시간이 이렇게나 지나버렸네요. 2018년을 정리하고 되돌아보는 것이 중요한 시점이 되어서 늦게라도 작성해 보려고 합니다.\n원래 2018년 계획\n원래 2018년 계획은 건강이었습니다. 2017년 능력에 차지도 않은 강의를 진행하면서 무리한다는 생각을 많이 했었거든요. 그래서 2018년 계획은 엄청 단순하게 건강이었습니다. 헌데…\n일어난 일\n결혼 1년차와 아이, 이사\n결혼 1년차와 아이, 이사는 정말 많은 시간이 필요했습니다. 물론 제가 시간을 썼다기 보단, 정신없이 지나가 버렸다고나 할까요?\n이직\n이직이 있었습니다. 이직을 하는 바람에 원래 1년 계획이었던 음성 인식은 안드로메다로…(눈물) 챗봇으로 좋은 제안이 왔었는데, 이리저리 재보다가 지금의 회사로 결정했습니다. 회사에서 R을 사용하고 싶다는 욕구와, 챗봇에서 도망치고 싶은 마음이 겹쳤죠. 독특하게 재무팀에서 일을 하는 중입니다. 재무팀이 필요한 데이터를 찾고, 만들고, 사용하기 좋은 환경을 갖추려고 노력하고 있습니다. 물론 놀랍게도 감사를 경험하고 있는 중인데, 저에게 득인지 실인지 잘 모르겠네요.\n번역\n\n책을 하나 번역했습니다. 이건 17년에 벌린 일이니 최대한 빨리 마무리해보자는 생각에 결국 끝낼 수 있었습니다. 물론 5명이나 진행했고, 일을 벌린 것 이외에는 저는 한게 없는 활동이었습니다만. 덕분에 너무 좋은 분들과 협업하는 경험을 해보게 되었습니다. 제가 처음 코드 리뷰 프로세스를 코드가 아닌걸로 겪어보게 된 것이기도 하구요.\n기업 강의\n강의도 하나 했네요. 영우님이 너무 좋은 기회를 만들어 주셨습니다. 부족한 능력에 과분한 대접도 받아보고, 값진 경험이었습니다. 전업을 충분히 고민할만 하면서도, 여전히 부족하구나 라는 생각을 하게 되었습니다.\nAI 대회 참여\n\n네이버 ai 해커톤 2018(와… 레포를 날렸어?!)에 참가했습니다. 어떻게 딱 이직 타이밍이라 예선을 할 시간이 있었군요. 다행히 결선 범위에 들어갈 수 있게 되어서 춘천의 커넥트원도 구경할 수 있었습니다. 제 기억에 지식인 질문 유사도 문제에서 한 9등쯤 했던거 같은데…. 제가 무식하게 제꺼 기록 해둔 레포도 날렸네요. 덕분에 이런저런 고민을 했던 이벤트이기도 합니다. keras도 많이 쓰고, 그때 멘토셨던 경호님이 좋게 봐주셨던 기분좋은 일도 있었죠.\n블로그\n어영부영 블로그를 열심히 했습니다. blogdown이란 신박한 패키지가 드디어 불을 질렀다고나 할까요. 버려진 워드프레스, 텀플러 등등을 거쳐 드디어 안착하고 18년엔 26개 포스트를 작성했네요.\n\n1년 동안 방문자는 17,466명 입니다. 재방문자 비율이 33% 쯤 되는군요.\n\n블로그에 붙어 있는 광고로 총 16.16 달러를 벌었군요. 압도적인 1등 컨텐츠는 R 크롤링에 대한 발표자료입니다. 아마 검색에 잘 걸려서지 않을까 싶습니다. 2번째는 번역이고, 개발 관련 글이다 보니 독자층이 좀더 넓은 편이었던 것 같습니다. 상위에 실제 18년 포스트는 4건이 있군요.\n\n쓰면서 느꼈던 점은, 최대한 원소스 멀티유즈 하자였습니다. 새롭게 컨텐츠를 기획하지 말고 있는 컨텐츠를 발산해야 컨텐츠 생산성이 좋다 느껴졌습니다.\n패키지\n관리하는 패키지에 변화도 좀 있었고, 새로 만든 것들도 있었습니다. 우선 드디어 DNH4에 댓글 수집 기능이 들어갔습니다. 덕분에 서비스에서 키를 관리하는 다른 방법을 배울 수 있었구요. 이 배움은 뭔가 기록을 남기고 싶은데, 그냥 삽질한거라 잘 모르겠네요. 아마 최근 시작한 유튜브로 한번 리마인드해보면 좋겠다는 생각이 듭니다. (네이버(N2H4)와 다음 뉴스의 댓글은 이제 셀레늄 쓰지 않고 빠르게 수집할 수 있으니 많이 사랑해주세요.)\npresidentSpeechKr 패키지는 한글 설명을 제거한 presidentSpeech 패키지로 우선 변환하였습니다. 윈도우에서 나는 경고와 같은 에러는 역시 사용하는데 많이 불편하더라구요. 우선 이 문제를 Rstudio 1.3 버전 마일스톤으로 이슈를 제기한 것으로 만족하려고 합니다. 참고로 Rstduio 현재 안정화 버전은 1.1.463입니다. (네.. 언제 될지 알 수 없단 뜻이죠…)\n나머지는 대부분 데이터 패키지이고, 야심차게 시작한 건 DBF입니다. 물론 개념만 겨우 확인한 패키지이지만, 개인적인 쓸모에 의해 만들어서 그런가 아주 애정이 갑니다. 이제 잘 다듬고, 워크플로우에 잘 녹여 사용해야겠죠.\n또 메일 서버가 세팅되어 있으면 좋겠지만, 없는 곳에서 사용하려고 sendgridr를 만들었습니다. 최초로 클래스 개념으로 패키지를 작성해봤는데, 많은 공부를 할 수 있었어요. 잘 활용하면 if 지옥을 좀 벗어날 수 있을 것 같은 가능성을 봤습니다.\n발표자료\n18년은 건강! 쉬자! 라고 생각한 만큼 발표는 전혀 생각하고 있지 않았습니다. 헌데 어영부영 2번이나 하고 말았습니다.\n데이터야 놀자에서 R과 redshift를 항해할 때 알아야할 상식사전(+협업) 라는 제목으로 한번 했구요. IBM 개발자 컨퍼런스에서 R로 만든 머신러닝 모델을 api로 제공하기 라는 제목으로 다른 한번을 했습니다. 무슨 부귀영화를 누리겠다고, 내용을 두개나 만들었는지… 덕분에 둘 다 부실부실해서 안타깝기만 합니다.\n유튜브\n\n여름쯤 시작하려고 했던 유튜브를 기어이 시작했습니다. 12월 18일에 첫 영상를 촬영하고, 오늘 1월 4일 기준 구독자 100명이 되었습니다. 데이터 패키지를 만드는 영상은 여러분이 도와주셔서 100건이 넘는 조회수를 기록했습니다. 7건의 동영상을 업로드했고, 4건을 한시간씩 하는 무서운 짓을 해버렸습니다. 시작하자마자 어디 아프고 해서 매일하겠다는 다짐을 지키질 못했네요.\n회사일\n뭔가 프로젝트스럽게 딱 끝낸게 있으면 좋을텐데 아쉽게도 그렇게 하지 못했습니다. 전부 다 진행 중이기만 하고, 속시원히 마무리한게 아직 없네요. 새해에는 상상하고 있는 그림이 잘 구현되었으면 좋겠습니다.\n새해 다짐\n우선 크게 3가지 정도 생각하고 있는데요.\n첫째는 역시 건강입니다. 지난 한해는 건강을 생각만 했다면, 올해는 구체적인 계획을 세워볼까 해요. 운동 계획과 치과 진료 계획을 세우고 실행하는 것이 목표입니다.\n둘째는 유튜브 입니다. 광고수익을 나눌 수 있는 최소 기준이 구독자 1,000명입니다. 구독자를 1,000명 모으는 것. 아마도 중요한 목표가 될 것 같습니다.\n셋째는 다시 회사 일입니다. 역시 업으로 삼고 해야 스스로의 성장에도 도움이 되는 법입니다. 현실적인 계획으로 작고, 빠르게 실행하는 걸 새롭게 다짐해보려고 합니다. 기왕하는거 다시 기록도 좀 잘 해서, 일마다 분석하고 회고할 수 있게 하려구요.\n+알파를 추가하자면 go를 공부하는 겁니다. 이번엔 좀 진짜 해서 손에 익으면 좋겠다 생각하고 있습니다.\n이렇게 회고글을 써보니 19년은 회고를 위해서 기록을 좀 열심히 해야 겠다는 생각이 들었습니다. 페이스북 글 분석 같은거로 거창하게 해볼까 하다가, 뭐든 시간이 걸리면 될 것도 안된다는 마음으로 임하고 있습니다.\n\n더 작고 더 빠르게\n\n아무리 되뇌어도 적응하기 쉽지 않네요.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106562771-24044680-656e-11eb-8576-052a795b24c4.png",
    "last_modified": "2022-04-06T06:38:07+00:00",
    "input_file": "2018년-회고.knit.md"
  },
  {
    "path": "post/회고-tqk-업데이트-수정-종가-반영-및-param-조정/",
    "title": "[회고] tqk 업데이트 수정 종가 반영 및 param 조정",
    "description": "tqk 패키지를 버전업하면서 배운 점을 작성해보았습니다.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2018-11-22",
    "categories": [
      "R",
      "tqk",
      "adjusted",
      "announce"
    ],
    "contents": "\n\n이번 0.1.0 버전 업데이트는 다음 소스 추가로 인한 속도 향상 및\n수정주가 반영입니다. 거기에 tq_get()함수를 모방하기로 한\n주제에 param 설계가 달라서 맞춰주는 작업을\n수행했습니다.\n배운 점\n새롭게 json을 처리하면서 purrr::transpose(),\ndplyr::select_if()를 알게 되었습니다. json을\ntibble::as_tibble() 로 처리한 후\ntidyr::unnest() 시 발생하는 문제의 원인을 알게\n되었습니다.\ntibble자료형과\nas_tibble() 함수\ntibble, tbl 자료형은 현대적인 R을\n사용하는데 근간이 되는 자료형입니다. base R의 data.frame의\n현대적 버전이라고 할 수 있는데요. 매우 많은 장점이 있습니다.\n우선 dim(), head(), class()\n개별 컬럼의 class()가 객체를 출력하는 것으로 한번에\n해결됩니다. 출력량도 화면에 기반하여 제한하고 있어서, 많은 출력으로\n멈추거나 하는 문제를 사전에 방지하고 있습니다. 좀 불편하다면, 컬럼도\n출력 제한을 한다는 점 정도 인데요.\n보통 matrix 나 data.frame을\ntibble 자료형으로 바꾸려면 as_tibble() 함수를\n사용합니다. json으로 들어온 list는 웹 데이터를\n다룰 때 많이 겪게 되는데요. 2단 구조의 list일 때\nas_tibble()이 동작한다면 아주 편할 것 같습니다.\n예를 들어 보겠습니다.\n\n\ncol_first_list <- list(a = list(1, 2, 3), b = list(4, 5, 6))\ncol_first_list\n\n\n$a\n$a[[1]]\n[1] 1\n\n$a[[2]]\n[1] 2\n\n$a[[3]]\n[1] 3\n\n\n$b\n$b[[1]]\n[1] 4\n\n$b[[2]]\n[1] 5\n\n$b[[3]]\n[1] 6\n\n2단 구조를 만들 때 헷갈리지 않기 위해서 1단은 이름을 지어서, 2단은\n이름없이 2단 list를 만들었습니다. 간단히 대응하면 1,2,3\n데이터를 가지는 a 컬럼과 4,5,6 데이터를 가지는\nb 컬럼의 table일 수 있을 것 같습니다. 컬럼 단위로\n묶어서 데이터를 보냈으므로, 저는 col_first_list라고\n이름지어 봤습니다.\n\n\nlibrary(dplyr)\ncol_first_list %>% \n    tibble::as_tibble()\n\n\n# A tibble: 3 × 2\n  a         b        \n  <list>    <list>   \n1 <dbl [1]> <dbl [1]>\n2 <dbl [1]> <dbl [1]>\n3 <dbl [1]> <dbl [1]>\n\n음… tibble로는 된거 같은데, 뭔가 이상합니다. 찾아보니\ntibble은 컬럼의 자료형이 list가\n가능하더라구요. 그럼 평소에 알고 있는 모습으로 바꾸는 작업이 필요할 것\n같습니다.\n새롭게 배운 함수 1\ntidyr::unnest()\nNest and unnest\n\nDescription\nNesting creates a list-column of data frames; unnesting flattens it back out into regular columns. Nesting is implicitly a summarising operation: you get one row for each group defined by the non-nested columns. This is useful in conjunction with other summaries that work with whole datasets, most notably models.\n\nLearn more in vignette(\"nest\").\n\nUsage\nnest(.data, ..., .key = deprecated())\n\nunnest(data, cols, ..., keep_empty = FALSE, ptype = NULL,\n  names_sep = NULL, names_repair = \"check_unique\",\n  .drop = deprecated(), .id = deprecated(), .sep = deprecated(),\n  .preserve = deprecated())\n제목과 설명을 보면 딱 필요한 함수 같아 보입니다. 한번 사용해\n볼까요?\n\n\ncol_first_list %>% \n  tibble::as_tibble() %>% \n  tidyr::unnest()\n\n\n# A tibble: 3 × 2\n      a     b\n  <dbl> <dbl>\n1     1     4\n2     2     5\n3     3     6\n\n깔끔하게 결과가 나왔습니다.\n하지만 보통 json을 웹서비스에서 받을 때 반대로 되어 있는 경우가\n많습니다.\n\n\nrow_first_list <- list(list(a = 1, b = 4), list(a = 2, b = 5), list(a = 3, b = 6))\nrow_first_list\n\n\n[[1]]\n[[1]]$a\n[1] 1\n\n[[1]]$b\n[1] 4\n\n\n[[2]]\n[[2]]$a\n[1] 2\n\n[[2]]$b\n[1] 5\n\n\n[[3]]\n[[3]]$a\n[1] 3\n\n[[3]]$b\n[1] 6\n\n\n\nrow_first_list %>% \n    tibble::as_tibble()\n\n\nError:\n! Columns 1, 2, and 3 must be named.\nUse .name_repair to specify repair.\nCaused by error in `repaired_names()`:\n! Names can't be empty.\n✖ Empty names found at locations 1, 2, and 3.\n\n우선 tibble::as_tibble()이 바로 처리 해주지를 못합니다.\n컬럼은 이름이 있어야만 한다는 군요. 이때 purrr::transpose()\n가 필요합니다.\n새롭게 배운 함수 2\npurrr::transpose()\nTranspose a list.\n\nDescription\nTranspose turns a list-of-lists \"inside-out\"; it turns a pair of lists into a list of pairs, or a list of pairs into pair of lists. For example, if you had a list of length n where each component had values a and b, transpose() would make a list with elements a and b that contained lists of length n. It's called transpose because x[[1]][[2]] is equivalent to transpose(x)[[2]][[1]].\n\nUsage\ntranspose(.l, .names = NULL)\n\n\nrow_first_list %>% \n    purrr::transpose() %>% \n    tibble::as_tibble() %>% \n    tidyr::unnest()\n\n\n# A tibble: 3 × 2\n      a     b\n  <dbl> <dbl>\n1     1     4\n2     2     5\n3     3     6\n\n이렇게 2단 으로 구성된 json 파일은 쉽게 tibble\n자료형으로 고쳐서 R에서 다룰수 있습니다.\ntidyr::unnest() 함수의\n문제점\n이제 얼마든지 json 데이터를 사용하기 좋게\ntibble로 바꿀 수 있게 된 것 같았습니다. (2단 구성이라면\n말이지요.) 하지만 어찌된 일인지 상황에 따라 에러가 계속 발생하더군요.\n찾아보니 컬럼에 null이 있을 때가 문제였습니다.\nlist 자료형은 그대로 null을 가지고 있는 반면,\ntidyr::unnest()가 동작할 때 null이 없어져서\n다른 컬럼과 갯수가 맞지 않게 되는 것이었습니다.\n\n\ninclud_null <- list(a = list(1, 2, 3), b = list(4, NULL, 6.5))\ninclud_null %>% \n  tibble::as_tibble()\n\n\n# A tibble: 3 × 2\n  a         b        \n  <list>    <list>   \n1 <dbl [1]> <dbl [1]>\n2 <dbl [1]> <NULL>   \n3 <dbl [1]> <dbl [1]>\n\n이렇게 tibble::as_tibble() 함수는 null을\n유지한 채로 동작했습니다. 하지만 tidyr::unnest()은 처리하지\n못하고 에러가 발생하네요.\n\n\ninclud_null %>% \n  tibble::as_tibble() %>% \n  tidyr::unnest()\n\n\n# A tibble: 3 × 2\n      a     b\n  <dbl> <dbl>\n1     1   4  \n2     2  NA  \n3     3   6.5\n\n또 전체가 null인 컬럼도 있으면 안됩니다.\n\n\nall_null <- list(a = list(1, 2, 3), b = list(NULL, NULL,NULL))\nall_null %>% \n  tibble::as_tibble()\n\n\n# A tibble: 3 × 2\n  a         b     \n  <list>    <list>\n1 <dbl [1]> <NULL>\n2 <dbl [1]> <NULL>\n3 <dbl [1]> <NULL>\n\nall_null %>% \n  tibble::as_tibble() %>% \n  tidyr::unnest()\n\n\n# A tibble: 3 × 2\n      a b    \n  <dbl> <lgl>\n1     1 NA   \n2     2 NA   \n3     3 NA   \n\n이 두 가지는 다른 처리방법을 사용해야 할 것 같습니다. 전체가\nnull인 컬럼은 제거하고, 일부가 null인 컬럼은\nnull을 다른 값으로 대체해야 겠네요. 전체가\nnull인 컬럼 이름을 하드코딩할 수도 있겠지만, 찾아서\n제거하는 것이 더 좋아보였습니다.\n새롭게 배운 함수 3\ndplyr::*_if()\ndplyr 패키지에는 muate() 함수나\nselect() 함수 뒤에 _if()가 붙은 조건 계열의\n함수가 있습니다. 이걸 이용해서 컬럼내 데이터가 전체 null인\n것을 제외하고 select() 하겠다가 가능할 것 같습니다.\n\n\nnulls_party <- list(a = list(1, 2, 3), \n                    b = list(NULL, NULL,NULL),\n                    c = list(NULL, 1,2),\n                    d = list(1,NULL,NULL),\n                    e = list(1,NULL,3))\nnulls_party %>% \n  tibble::as_tibble() %>% \n  dplyr::select_if( ~ !all(is.null(unlist(.x))))\n\n\n# A tibble: 3 × 4\n  a         c         d         e        \n  <list>    <list>    <list>    <list>   \n1 <dbl [1]> <NULL>    <dbl [1]> <dbl [1]>\n2 <dbl [1]> <dbl [1]> <NULL>    <NULL>   \n3 <dbl [1]> <dbl [1]> <NULL>    <dbl [1]>\n\n조금 복잡한데요. ~은 익명 함수를 작성하는\n줄임표현입니다. ~ sum(.x)는\nfuncion(x) sum(x)와 같은 표현이죠. !는\n논리형을 반대로 바꿔라는 뜻이구요. all() 함수는\nis.null() 함수는 데이터가 null인지를 확인하는\n함수 입니다. select_if() 함수 내에서 익명 함수 문법을\n사용하게 되면, .x는 컬럼을 뜻하게 됩니다. 지금은 컬럼이\n리스트기 때문에 unlist()로 vector로\n바꾸었습니다.\n그럼 설명해보면\n... %>% \n  dplyr::select_if( ~ !all(is.null(unlist(.x))))\nselect_if(): 조건에 맞는 것만 선택할꺼야.\n~: 함수를 조합해야 하니까 익명함수를 쓸께. !:\n뒤에 논리형 결과가 나오면 반대로 바꿔줘. all(): 안에 모두가\nTRUE면 TRUE하나를, 하나라도 아니라면\nFALSE를 반환해. is.null: 값이\nNULL이면 TRUE를 주세요. unlist():\nlist 자료형을 vector로 풀어줘.\n.x: 익명 함수에서 입력을 대표해.\n입니다.\n그러고 보니…\n... %>% \n  dplyr::select_if(~ .x %>% unlist() %>% is.null() %>% all() %>% !.)\n이렇게 해도 되는군요. 조금 가독성이 좋아졌습니다.\n이제 전체 NULL인 컬럼을 제거 했으니, 일부가\nNULL인 경우 우선 0으로 대체 해보겠습니다.\nmap’s party\n우선 결론 먼저 쓰고 시작해보면,\n\n\nnulls_party %>% \n  tibble::as_tibble() %>% \n  dplyr::select_if(~ .x %>% unlist %>% is.null %>% all %>% !.) %>% \n  purrr::map_dfc(~ .x %>% purrr::map(is.null) %>% ifelse(0,.x) %>% unlist())\n\n\n# A tibble: 3 × 4\n      a     c     d     e\n  <dbl> <dbl> <dbl> <dbl>\n1     1     0     1     1\n2     2     1     0     0\n3     3     2     0     3\n\n입니다.\n새롭게 배우게 된 함수는 purrr::map_dfc() 였습니다.\npurrr::map()함수는 기본적으로 list를\n인풋으로 받습니다. 결과도 마찬가지로 list를\n출력해줍니다.\n복잡하게 결과가 나와야 한다면, 전처리를 따로 하기위해서\nlist 아웃풋은 좋은 선택입니다. 하지만 vector로\n나올법한 결과(ex> sum()같이 개별 리스트당 하나의 결과가\n나오거나 하는 등)라면 vector로 아웃풋이 나와도 좋을 것\n같습니다.\n그렇게 해주는 함수가 purrr::map_*()계열 함수입니다. *\n에는 lgl, dbl, chr같이 자료형이\n들어가 있죠. 당연한 설계입니다. vector는 모든 요소가 같은\n자료형이어야 하니까요.\n그럼 data.frame 형태로 받을수는 없을까요? 찾아보니\npurrr::map_df*()가 그 역할을 하더라구요. 그냥\ndf와 dfr, dfc 3개의 접미사를\n제공합니다. dfr과 dfc는 각각 데이터를\nrow 방향과 col 방향으로 합치겠다는\n뜻입니다.\nmap()함수는 data.frame 자료형에서\n기본적으로 col을 list 처럼 받아서 처리합니다.\n그럼 각 컬럼별로 개별 요소에 NULL이 있는지 확인하고 만약\nNULL이라면 0으로 바꿔라 라고 해보겠습니다.\n... %>% \n  purrr::map_dfc(~ .x %>% purrr::map(is.null) %>% ifelse(0,.x) %>% unlist())\n이것도 조금 어렵네요… 우선 골치 아파지는 이유가 각 컬럼이\nlist이기 때문입니다. map()을 이중으로 써야\n하는군요.\npurrr::map_dfc()는 위에서 충분히 설명한 것 같습니다.\n그러면 익명함수 다음부터 확인해 볼 껀데요.\n각 컬럼내의 list요소가 각각 NULL인지\n확인합니다. 이때! purrr:map()때문에, .x가 각\n컬럼을 대표하지 않고, 각 셀을 대표하는 상태로 변합니다.\n\n\nmaps_party <- nulls_party %>% \n  tibble::as_tibble() %>% \n  dplyr::select_if(~ .x %>% unlist %>% is.null %>% all %>% !.)\nmaps_party\n\n\n# A tibble: 3 × 4\n  a         c         d         e        \n  <list>    <list>    <list>    <list>   \n1 <dbl [1]> <NULL>    <dbl [1]> <dbl [1]>\n2 <dbl [1]> <dbl [1]> <NULL>    <NULL>   \n3 <dbl [1]> <dbl [1]> <NULL>    <dbl [1]>\n\n그냥 purrr:map()을 사용해서 .x가\nNULL인지 체크해보겠습니다.\n\n\nmaps_party %>% \n  purrr::map(~ .x %>% is.null)\n\n\n$a\n[1] FALSE\n\n$c\n[1] FALSE\n\n$d\n[1] FALSE\n\n$e\n[1] FALSE\n\n4개 컬럼에 FALSE라는 결과를 list로\n출력해줬네요. 이건 슬프게도 컬럼이 NULL이냐 물어본 것이라\n당연히 전부 FALSE가 나와야 합니다. 그럼 다시\nmap() in map()으로 작성해서 확인해 보겠습니다.\n\n\nmaps_party %>% \n  purrr::map(~ .x %>% purrr::map(is.null))\n\n\n$a\n$a[[1]]\n[1] FALSE\n\n$a[[2]]\n[1] FALSE\n\n$a[[3]]\n[1] FALSE\n\n\n$c\n$c[[1]]\n[1] TRUE\n\n$c[[2]]\n[1] FALSE\n\n$c[[3]]\n[1] FALSE\n\n\n$d\n$d[[1]]\n[1] FALSE\n\n$d[[2]]\n[1] TRUE\n\n$d[[3]]\n[1] TRUE\n\n\n$e\n$e[[1]]\n[1] FALSE\n\n$e[[2]]\n[1] TRUE\n\n$e[[3]]\n[1] FALSE\n\n2단 list로 결과를 주는데, 결국 전부\nlist이군요? 이제 ifelse() 함수로\nis.null() 결과가 TRUE면 0을,\nFALSE면 원래 값 그대로 넣어보겠습니다.\n\n\nmaps_party %>% \n  purrr::map(~ .x %>% purrr::map(is.null) %>% ifelse(0,.x))\n\n\n$a\n$a[[1]]\n[1] 1\n\n$a[[2]]\n[1] 2\n\n$a[[3]]\n[1] 3\n\n\n$c\n$c[[1]]\n[1] 0\n\n$c[[2]]\n[1] 1\n\n$c[[3]]\n[1] 2\n\n\n$d\n$d[[1]]\n[1] 1\n\n$d[[2]]\n[1] 0\n\n$d[[3]]\n[1] 0\n\n\n$e\n$e[[1]]\n[1] 1\n\n$e[[2]]\n[1] 0\n\n$e[[3]]\n[1] 3\n\n이렇게 보니 ifelse()에 들어가는 .x는 처음에\n사용한 .x가 아니라, 안쪽에 있는 purrr::map()\n함수에서 사용하는 .x인듯합니다.\n\n\nmaps_party %>% \n  purrr::map(~ .x %>% purrr::map(~ifelse(is.null(.x),0,.x)))\n\n\n$a\n$a[[1]]\n[1] 1\n\n$a[[2]]\n[1] 2\n\n$a[[3]]\n[1] 3\n\n\n$c\n$c[[1]]\n[1] 0\n\n$c[[2]]\n[1] 1\n\n$c[[3]]\n[1] 2\n\n\n$d\n$d[[1]]\n[1] 1\n\n$d[[2]]\n[1] 0\n\n$d[[3]]\n[1] 0\n\n\n$e\n$e[[1]]\n[1] 1\n\n$e[[2]]\n[1] 0\n\n$e[[3]]\n[1] 3\n\n같은 결과인거 보니 맞네요.\n이제 리스트를 tibble로 다시 조합해 내야 합니다.\npurrr::map_*()으로 조합해볼까요.\n\n\nmaps_party %>% \n  purrr::map(~ .x %>% purrr::map_dbl(~ifelse(is.null(.x),0,.x)))\n\n\n$a\n[1] 1 2 3\n\n$c\n[1] 0 1 2\n\n$d\n[1] 1 0 0\n\n$e\n[1] 1 0 3\n\n컬럼 단위는 잘 진행된 것 같습니다. 헌데 지금 예시야 숫자만 있지만,\n글자인 컬럼이 있거나 하면 에러가 날겁니다. list를\nvector로 풀면 될 것 같은데… 우리는 이미 그런 동작을 해주는\n함수를 알고 있습니다.\n\n\nmaps_party %>% \n  purrr::map(~ .x %>% purrr::map(~ifelse(is.null(.x),0,.x)) %>% unlist)\n\n\n$a\n[1] 1 2 3\n\n$c\n[1] 0 1 2\n\n$d\n[1] 1 0 0\n\n$e\n[1] 1 0 3\n\n같은 결과가 나왔군요! 패키지 코드에서는 이미 확인했지만, 컬럼이 여러\n자료형이어도 잘 동작합니다. 그럼 이제 만들어진 개별 list를\n컬럼으로 합치기만 하면 되군요! 드디어 처음에 설명했던\npurrr::map_dfc()함수를 사용할 차례인가 봅니다.\n\n\nmaps_party %>% \n  purrr::map_dfr(~ .x %>% purrr::map(~ifelse(is.null(.x),0,.x)) %>% unlist)\n\n\n# A tibble: 3 × 4\n      a     c     d     e\n  <dbl> <dbl> <dbl> <dbl>\n1     1     0     1     1\n2     2     1     0     0\n3     3     2     0     3\n\n중간에 unlist()를 사용하면서, 이미 개별 컬럼이\nlist가 아니게 되었네요. 감사하게 여기서는\ntidyr::unnest() 함수를 사용할 필요가 없어진 것\n같습니다.\n마치며\n다시 한 번 {purrr} 패키지의 강력함과 어려움을 동시에 느낄 수 있었던\n작업이었습니다. map()을 이 중으로 사용하면서\n.x이 대표하는 대상이 달라진다는 점이 재밌었는데요. 앞으로\n복잡한 list(json)를 다룰 때 더 수월하게 할 수\n있을 것 같습니다.\n감사합니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106561891-dc30ef80-656c-11eb-8f14-e25c99bc7f5a.png",
    "last_modified": "2022-04-05T15:24:28+00:00",
    "input_file": {}
  },
  {
    "path": "post/r과-python-중에-어떤-것을-공부해야-할까/",
    "title": "R과 Python 중에 어떤 것을 공부해야 할까",
    "description": "우선 뭐든지 시작하세요!",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2018-10-10",
    "categories": [
      "R",
      "python",
      "study",
      "discuss"
    ],
    "contents": "\n\nContents\n어디에 사용할 것인가?\npython이 왜 이렇게 인기인가?\n뭘 기준으로 선택하면 좋을까?\n왜 이런 기준을 세웠는가?\n그럼 IDE는 R은 Rstudio, python은 jupyter | pycharm 을 써야 하나?\n다시 돌아가서 결론은?\n다른 기준이 또 있나?\n각각의 생태계가 다르다던데\n\n\n한줄요약\n뭐든지 우선 시작하세요!\n이미 한물가고 필요없는 논의일 수도 있지만, 개인적을 생각을 정리한다고 생각하고 글을 시작해보겠습니다. R을 충분히 사용하고 있는 사용자로서, python은 뭐 1년 이상은 쓴 사용자로서 느끼는 점을 공유하고자 합니다. 개인적인 의견이므로 토론 대환영, 제가 모르는 정보 제공 대환영입니다.\n어디에 사용할 것인가?\n물론 데이터를 분석하는데 사용할 것입니다. R과 python은 지위가 매우 비슷합니다. 물론 python은 좀더 본격적인 범용 개발언어이고, R은 다 할 수 있지만, 통계쪽으로 특화된 패키지가 많습니다. C, Cpp, fortran 등 저수준 언어로 만들었고, 문법이 쉽습니다. 여러 외부의 리소스를 잘 활용하는 편입니다. 데이터 분석이라는 분야에서 유명합니다.\n뭐가 다른가?\n터미널, bash, 쉘 이라는 단어를 모르신다면 배워야 하는 것이 python, 몰라도 되는 것이 R입니다. 물론 Unix 계열에서 사용하시면 어짜피 그걸 쓰신다는건 안다는 소리니 패스입니다. OOP가 뭔지 알아야 python은 좀 잘 쓸 수 있고, R을 몰라도 됩니다. 이 차이는 제가 느끼기엔 python은 뭔가 사용자가 개발자이어서 만드는 소스 모두가 패키지이기를 기대하는 것 같았습니다. R은 패키지 사용자가 개발을 잘 모르기 때문에 쉽게 만들어주어야 한다는 느낌이 있습니다. 패키지 수 등을 보면 python 생태계가 10배쯤 큰데요. 물론 범용이기 때문이기도 하지만, R은 패키지 제작자도 많지 않고 좀 어려운 느낌이 있습니다.\npython이 왜 이렇게 인기인가?\n저는 딥러닝 때문이라고 봅니다만, 잘 모르겠습니다. 건너 듣기로는 python 배우는 건 어렵다는 걸 사람들이 알기 시작했다고 하기도 하고. 그렇다고 그 사람들이 사용하기에 R이 좋은가 하면 그렇지도 않은 것 같습니다. 암튼 제 생각은 python이 R보다 좋다기 보단, 그냥 유행인거 라고 생각해봅니다. (물론 제가 R 사용자니 사견이 많이 담긴 해석일 수 있습니다.)\n뭘 기준으로 선택하면 좋을까?\n저는 고독한 R 사용자(?)로 거의 영어 문서에 기반해서 독학했습니다. 물론 덕분에 패키지 개발등 좀더 유틸리티 패키지 개발자로 역할을 할 수 있었겠지요. 제 작은 희망이 있다면, R 사용자와 함께 회사일을 하는 것입니다. 그렇기에 직장인과 학생으로 나누어 조언을 하자면, 학생은 컴공 베이스라면 python을, 아니라면 R을 추천드립니다. 요즘은 워낙 기본서도 많이 나와있는 편이라, 어느 정도의 삽질을 통해 독학하거나 공부하실 수 있습니다. 직장인이라면, 직접 물어볼 수 있는 사람중에 python과 R 사용자가 있는지를 기준으로 보면 좋을 것 같습니다. 뭐가 다른가? 에서 파이썬이 더 많이 공부해야 하는 것처럼 묘사했지만, 봐줄 사람이 있다면 넘지 못할 공부도 아닙니다. 숫자 시작이 0이라는 건 익숙해지면 될 일인거죠. 물론 제가 OOP를 작성하거나 사용하는 법을 이해하는데 2년쯤 걸렸습니다만….(…)\n왜 이런 기준을 세웠는가?\npython과 R은 사실 공생관계입니다. python의 pandas는 R의 기본 자료형인 data.frame을 모방한 패키지입니다. R에는 reticulate 패키지가 python의 native-wrapper 패키지로 동작합니다. 덕분에 python 패키지 모두를 R에서 사용할 수 있죠. python에서도 마찬가지로 rpy2 패키지로 R을 모두 사용할 수 있습니다.\n그럼 IDE는 R은 Rstudio, python은 jupyter | pycharm 을 써야 하나?\n저도 상황에 따라 사용하긴 합니다만, 처음 배운 도구에서 벗어날 수 없는 것처럼 저는 jupyter가 너무 싫습니다. rstudio에서 이제 python을 지원하기 때문에 마음껏 rstudio 사용하면 됩니다. 기다린 보람이 있어서, python에서 만든 객체를 R에서 사용하는 등 호환이 좋네요. jupyter는 반대로 꽤 일찍 R을 사용할 수 있었습니다. 원체 범용 repl 도구로 개발되었었고, 최근 jupyter hub 같이 좀더 ide 같아지면서 좀 쓸만해졌다고는 합니다. pycharm은 제가 잘 안쓰게 되서 잘 모르겠습니다. 더욱 개발자들인 분들이 쓰기 좋은 기능들을 많이 가지고 있는 인상이었습니다. 제가 쓰는 수준에서는 Rstudio로 충분했습니다. 이것도 한번 소개해야 겠네요. 저는 rstudio server 버전이 있어서 docker랑 호환이 좋은게 너무 좋네요.\n다시 돌아가서 결론은?\n저만 봐도 R을 주력으로 쓰지만, Python, node 등 가리지 않고 사용하는 편입니다. (물론 Java는 정말 싫어해서 처다보고 있지도 않습니다만, 사용자층이 두터운데는 이유가 있겠죠.) 한줄 요약에도 있지만, 뭐가 되었든 우선 시작하세요. 하루라도 빨리 배우시는게 자신의 미래의 위해서 좋은 것 같습니다. 자신이 무엇을 모르는지 모르는 단계에서 벗어나셔야 성장할 수 있습니다.\n다른 기준이 또 있나?\n상황을 개인만으로 한정해 보자면, 개발과 비개발로 나누어 자신의 성향이 좀더 개발쪽이면 python, 비개발쪽이면 R을 하라고 이야기해준 적이 있습니다. 또 범용 개발 언어라는 특성이 있어, 좀 더 일반적인 개발을 함께 할 계획이라면 python을, 아니라면 R을 추천했었습니다. 다양한 일을 해야 된다고 하면 저라면 단연 R을 추천드리겠습니다만, python이 조금 더 나은 선택일 수 있습니다. 단적인 예로 마우스 오토메이션 관련된 패키지가 python에는 5개 이상인데, R에는 2개(모두 기능이 제한적임) 뿐입니다.\n각각의 생태계가 다르다던데\n맞습니다. python은 단연코 개발자 생태계입니다. 우리 나라에도 회사에서 주변을 보면(it 회사라면) python 하시는 분들이 참 많습니다. R은 해외의 통계학자들과 생물통계학자들을 위한 도구로 성장했기 때문에 학계 생태계입니다. 놀랍게도 C++을 함께 사용하는 것이 당연한 분들이 많습니다.(저는 아직 멀었습니다. 흑흑) 최근에는 비즈니스로 사용하시는 분들이 많아지는 추세이긴 합니다.\n위에서도 이야기했지만, 저의 “인상”을 작성한 것이기 때문에 사실과 괴리가 매우 클 수 있습니다. 언제든 내용 수정, 토론, 의견, 대환영입니다. 감사합니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106514604-d2c96800-6517-11eb-8766-1641b8626a6e.png",
    "last_modified": "2022-04-05T15:17:14+00:00",
    "input_file": {}
  },
  {
    "path": "post/패키지-소개-nosql-데이터베이스를-다루는-nodbi/",
    "title": "[패키지 소개]NoSQL 데이터베이스를 다루는 nodbi",
    "description": "이제 R로 MongoDB, Redis(server based), CouchDB, Elasticsearch, etcd를 다룰 수 있습니다.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2018-08-08",
    "categories": [
      "R",
      "nosql",
      "dbi",
      "package"
    ],
    "contents": "\n\n한줄요약\n이제 R로 MongoDB, Redis(server based), CouchDB, Elasticsearch, etcd를 다룰 수 있습니다.\nR에는 여러가지 데이터 베이스를 다루는 도구들이 있습니다. MS의 표준 SQL 드라이버인 ODBC를 사용하는 odbc 패키지(r-dbi 팀), java의 표준 SQL 드라이버인 JDBC를 사용하는 RJDBC 패키지(rJava 개발자 Simon Urbanek), r-dbi팀이 직접 관리하는 DBI 패키지가 대표적입니다.\n이외에도 개인들이 개발하거나 각 데이터베이스에 맞춰 만든 도구들이 있는데요. 대부분 위의 패키지들을 사용해서 연결 부분을 쉽게하거나, 데이터 베이스가 통신 프로토콜을 지원해서 wrapper를 만든다거나 하는 경우인거 같습니다.\n아무튼!\n데이터베이스는 관계형이라고 말하는 RDB 계열과 문서형이라고 부르는 NoSQL 계열이 있습니다. 특별히 NewSQL 계열이라고 말하는 부류도 있습니다. 위에서 이야기한 DBI 등등의 드라이버는 표준 SQL 문법을 지원하는 관계형 DB들을 다룰 때 사용합니다. 이제 그에 대응하는 NoSQL을 다루기 위한 R 패키지가 등장했는데요. 바로 nodbi 패키지입니다.\n문서에 따르면 nodbi 패키지는 대표적인 NoSQL 데이터베이스인 mongoDB에서부터 엘라스틱서치까지 총 5개의 NoSQL 데이터베이스를 지원합니다. ropensci 팀이 r-dbi 팀이 부러웠는지 공통으로 사용할 수 있는 패키지를 제작하기 시작했네요. 이제 0.1.0 버전으로 초기 단계라고 볼 수 있습니다. 그동안 각 디비 api에 맞춰 개별로 관리되고 있는 패키지들이 있었습니다. 현재 유지관리가 되고 있는 패키지들은\nMongoDB : mongolite\nRedis : redux\nCouchDB : sofa\nElasticsearch : elastic\netcd : etseed\n각자 쉬운 문법을 사용하기 위해 노력했지만 가장 큰 문제점은 dplyr 패키지와의 호환성이었습니다. Elasticsearch의 경우는 파이프 연산자를 지원하는 elasticdsl 패키지가 있지만, 자신의 특수한 문법만 사용할 수 있습니다.\n위의 개별 패키지들과는 다르게 nodbi는 dplyr 패키지와의 호환성을 목표로 개발이 시작되었습니다. 갈길이 구만리이긴 하겠지만, dplyr로 대동단결하면 할 수록 R 사용자들는 추가적인 공부없이 많은 패키지들을 다룰 수 있게 되겠지요.\nsparklyr도 써봐야 하는데, 새로 생기는 것만 늘어가는 군요.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106499231-b02d5400-6503-11eb-8995-40307c1ace35.png",
    "last_modified": "2022-04-05T15:07:48+00:00",
    "input_file": {}
  },
  {
    "path": "post/패키지-소개-암호화폐-시세와-인덱스를-제공하는-ubci-패키지를-소개합니다/",
    "title": "[패키지 소개] 암호화폐 시세와 인덱스를 제공하는 ubci 패키지를 소개합니다",
    "description": "ubci 패키지 개발을 시작하였습니다.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2018-05-18",
    "categories": [
      "R",
      "ubci",
      "crypto",
      "package"
    ],
    "contents": "\n\nContents\n함수 예\n라이선스 문제\n패키지 계획\n\n\n세줄요약\n암호화폐 관련 시세와 인덱스 정보를 제공하는 ubci\n패키지를 공개함.\nubci는 upbit에서\n제공하는 데이터로 비영리 배포는 자유라고 해서 개발함.\n데이터 라이선스는 또 다른 문제이니 ubci 가서 확인바람.\n암호화폐는 2017년의 붐을 기점으로 사회 곳곳에 그 존재감을 드러내고\n있습니다. 여러 이슈가 있긴 하지만 국내에는 4대 거래소(빗썸, 업비트,\n코빗, 코인원)외에도 새로운 거래소들이 속속 나타고 있는 중입니다.\n이외에도 카카오와 라인(네이버)이 각각 암호화폐 전문 자회사를 세우는 등\n기업의 관심이 그 어느때보다 높습니다.\n아직 이슈가 안정적인 분야가 아니다 보니 이슈 파이팅이 그 어느\n분야보다 중요한데요. 현시간 코인마켓캡 기준 전세계 거래량 6위쯤 되는\nupbit가 코인 인텍스를 들고나왔습니다. 바로 UBCI입니다. 저도 관심이 가는\n내용이라 사이트를 둘러보았는데, 데이터를 깨끗하게 제공하더라구요. 그래서\n간단하게 R 패키지화 해보았습니다. 놀랍게도 패키지 이름은 ubci입니다.\n## github에서 패키지 설치\nremotes::install_github(\"mrchypark/ubci\")\n한글 데이터가 포함되어 있으니 인코딩이 UTF-8인지 확인해\n주세요.\n\n\nSys.getlocale()\n\n\n[1] \"en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\"\n\n함수 예\n패키지가 리드미와 설명서를 제공하고 있지만 저도 다시 사용해\n보겠습니다.\n인덱스 코드 가져오기\nubci_index_options() 함수는 인덱스를 가져오기에 앞서\n인덱스의 이름과 설명을 알려줍니다.\n\n\nlibrary(ubci)\nubci_index_options()\n\n\n# A tibble: 26 × 4\n   index    name                                cate           smry   \n   <chr>    <chr>                               <chr>          <chr>  \n 1 UBMI     UBMI(Upbit Market Index)            Market Indexes \"It is…\n 2 UBMI_ST  UBMI BTC quote(Upbit Market Index)  Market Indexes \"It is…\n 3 UBAI     UBAI(Upbit Altcoin Index)           Market Indexes \"It is…\n 4 UBAI_ST  UBAI BTC quote(Upbit Altcoin Index) Market Indexes \"It is…\n 5 UTTI     UBMI 10(Upbit Top 10)               Market Indexes \"It is…\n 6 UTHI     UBMI 30(Upbit Top 30)               Market Indexes \"It is…\n 7 THMIDX20 NFT & Collectibles                  Theme Indexes  \"\"     \n 8 THMIDX21 Oracles                             Theme Indexes  \"\"     \n 9 THMIDX22 IoT                                 Theme Indexes  \"\"     \n10 THMIDX23 Smart Contracts                     Theme Indexes  \"\"     \n# … with 16 more rows\n\n자료형은 tbl로 되어 있네요. 주식 분석 패키지의 최강자인\ntidyquant와\n상성을 고려한 선택이었습니다. ubci_index_options() 함수는\nlang 인자로 언어를 변경할 수 있습니다.\n\n\nubci_index_options(lang=\"ko\")\n\n\n# A tibble: 26 × 4\n   index    name                                cate        smry      \n   <chr>    <chr>                               <chr>       <chr>     \n 1 UBMI     UBMI(Upbit Market Index)            시장 인덱스 업비트 거…\n 2 UBMI_ST  UBMI BTC quote(Upbit Market Index)  시장 인덱스 UBMI 인덱…\n 3 UBAI     UBAI(Upbit Altcoin Index)           시장 인덱스 업비트 거…\n 4 UBAI_ST  UBAI BTC quote(Upbit Altcoin Index) 시장 인덱스 UBAI 인덱…\n 5 UTTI     UBMI 10(Upbit Top 10)               시장 인덱스 업비트에 …\n 6 UTHI     UBMI 30(Upbit Top 30)               시장 인덱스 업비트에 …\n 7 THMIDX20 대체불가능 토큰                     테마 인덱스 NFT 자산… \n 8 THMIDX21 오라클                              테마 인덱스 오라클을 …\n 9 THMIDX22 아이오티                            테마 인덱스 사물인터… \n10 THMIDX23 스마트컨트랙                        테마 인덱스 스마트컨… \n# … with 16 more rows\n\n인덱스 데이터\nubci_index() 함수는 인덱스의 일별 시가, 고가, 저가,\n종가, 거래량을 제공합니다. from,to 인자로\n기간을 조절할 수 있습니다.\n\n\nloi<-ubci_index_options()\nloi$index[1]\n\n\n[1] \"UBMI\"\n\nubci_index(loi$index[1])\n\n\n# A tibble: 1,000 × 6\n   index date            open     high       low    close\n   <chr> <date>         <dbl>    <dbl>     <dbl>    <dbl>\n 1 UBMI  2022-04-05 10822.88  10848.61 10765.07  10827.19\n 2 UBMI  2022-04-04 10801.66  10856.48 10500.57  10817.46\n 3 UBMI  2022-04-03 10640.31  10928.84 10562.13  10800.85\n 4 UBMI  2022-04-02 10659.57  10844.77 10601.31  10634.34\n 5 UBMI  2022-04-01 10343.70  10695.00 10140.25  10656.63\n 6 UBMI  2022-03-31 10548.65  10726.93 10320.67  10354.54\n 7 UBMI  2022-03-30 10544.96  10647.64 10352.57  10549.23\n 8 UBMI  2022-03-29 10448.43  10748.33 10399.69  10545.32\n 9 UBMI  2022-03-28 10284.67  10656.14 10252.65  10453.50\n10 UBMI  2022-03-27  9936.408 10313.73  9859.896 10282.75\n# … with 990 more rows\n\ntail(ubci_index(loi$index[1], from=\"2018-05-15\"))\n\n\n# A tibble: 6 × 6\n  index date           open     high      low    close\n  <chr> <date>        <dbl>    <dbl>    <dbl>    <dbl>\n1 UBMI  2019-07-16 1889.214 1921.231 1631.602 1649.508\n2 UBMI  2019-07-15 1803.163 1925.330 1711.438 1890.068\n3 UBMI  2019-07-14 2023.780 2028.466 1798.875 1803.035\n4 UBMI  2019-07-13 2075.992 2082.920 1969.310 2022.524\n5 UBMI  2019-07-12 2016.107 2085.569 1943.946 2075.444\n6 UBMI  2019-07-11 2149.716 2153.501 1977.812 2015.747\n\nubci_index(loi$index[1], to=\"2018-05-15\")\n\n\n# A tibble: 0 × 6\n# … with 6 variables: index <chr>, date <date>, open <dbl>,\n#   high <dbl>, low <dbl>, close <dbl>\n\nubci_index(loi$index[1], from=\"2018-05-10\", to=\"2018-05-15\")\n\n\n# A tibble: 0 × 6\n# … with 6 variables: index <chr>, date <date>, open <dbl>,\n#   high <dbl>, low <dbl>, close <dbl>\n\n암호화폐 코드\nubci_get_options() 함수는 취급하는 암호화폐의 종류를\n이름과 코드로 제공합니다.\n\n\nubci_get_options()\n\n\n# A tibble: 841 × 5\n   code           name             exchange tradeStatus marketState\n   <chr>          <chr>            <chr>    <chr>       <chr>      \n 1 UPBIT.KRW-BTC  Bitcoin          UPBIT    ACTIVE      ACTIVE     \n 2 UPBIT.KRW-DASH Dash             UPBIT    DELISTED    DELISTED   \n 3 UPBIT.KRW-ETH  Ethereum         UPBIT    PREVIEW     ACTIVE     \n 4 UPBIT.BTC-NEO  NEO              UPBIT    DELISTED    DELISTED   \n 5 UPBIT.BTC-ETH  Ethereum         UPBIT    PREVIEW     ACTIVE     \n 6 UPBIT.BTC-LTC  Litecoin         UPBIT    PREVIEW     ACTIVE     \n 7 UPBIT.BTC-XRP  Ripple           UPBIT    PREVIEW     ACTIVE     \n 8 UPBIT.BTC-ETC  Ethereum Classic UPBIT    PREVIEW     ACTIVE     \n 9 UPBIT.BTC-OMG  OmiseGo          UPBIT    PREVIEW     ACTIVE     \n10 UPBIT.BTC-CVC  Civic            UPBIT    PREVIEW     ACTIVE     \n# … with 831 more rows\n\nubci_get_options() 함수 역시 한글 옵션을 제공합니다.\n\n\nubci_get_options(lang=\"ko\")\n\n\n# A tibble: 841 × 5\n   code           name           exchange tradeStatus marketState\n   <chr>          <chr>          <chr>    <chr>       <chr>      \n 1 UPBIT.KRW-BTC  비트코인       UPBIT    ACTIVE      ACTIVE     \n 2 UPBIT.KRW-DASH 대시           UPBIT    DELISTED    DELISTED   \n 3 UPBIT.KRW-ETH  이더리움       UPBIT    PREVIEW     ACTIVE     \n 4 UPBIT.BTC-NEO  네오           UPBIT    DELISTED    DELISTED   \n 5 UPBIT.BTC-ETH  이더리움       UPBIT    PREVIEW     ACTIVE     \n 6 UPBIT.BTC-LTC  라이트코인     UPBIT    PREVIEW     ACTIVE     \n 7 UPBIT.BTC-XRP  리플           UPBIT    PREVIEW     ACTIVE     \n 8 UPBIT.BTC-ETC  이더리움클래식 UPBIT    PREVIEW     ACTIVE     \n 9 UPBIT.BTC-OMG  오미세고       UPBIT    PREVIEW     ACTIVE     \n10 UPBIT.BTC-CVC  시빅           UPBIT    PREVIEW     ACTIVE     \n# … with 831 more rows\n\n암호화폐 시세 정보\nubci_get() 함수 또한 암호화폐의 일별 시가, 고가, 저가,\n종가, 거래량을 제공합니다.\n\n\nloc<-ubci_get_options()\nloc$code[1]\n\n\n[1] \"UPBIT.KRW-BTC\"\n\nubci_get(loc$code[1])\n\n\n# A tibble: 400 × 7\n   code       date           open     high      low    close    volume\n   <chr>      <date>        <dbl>    <dbl>    <dbl>    <dbl>     <dbl>\n 1 UPBIT.KRW… 2022-04-05 57069000 57242000 56850000 57159000  975.8708\n 2 UPBIT.KRW… 2022-04-04 56596000 57300000 55510000 57055000 5916.740 \n 3 UPBIT.KRW… 2022-04-03 56006000 57500000 55830000 56639000 3818.056 \n 4 UPBIT.KRW… 2022-04-02 56326000 57350000 55831000 56050000 3882.902 \n 5 UPBIT.KRW… 2022-04-01 55331000 56790000 54246000 56369000 6752.645 \n 6 UPBIT.KRW… 2022-03-31 56594000 57227000 55230000 55352000 5141.563 \n 7 UPBIT.KRW… 2022-03-30 56985000 57100000 56015000 56620000 4136.114 \n 8 UPBIT.KRW… 2022-03-29 56900000 57540000 56390000 56985000 6629.178 \n 9 UPBIT.KRW… 2022-03-28 55936000 57678000 55827000 56914000 6374.435 \n10 UPBIT.KRW… 2022-03-27 53888000 56201000 53674000 55949000 5341.024 \n# … with 390 more rows\n\ntail(ubci_get(loc$code[1], from=\"2018-05-15\"))\n\n\n# A tibble: 6 × 7\n  code        date           open     high      low    close    volume\n  <chr>       <date>        <dbl>    <dbl>    <dbl>    <dbl>     <dbl>\n1 UPBIT.KRW-… 2021-03-07 56225000 58722000 56218000 58155000  7153.684\n2 UPBIT.KRW-… 2021-03-06 56636000 57000000 54754000 56225000  5608.844\n3 UPBIT.KRW-… 2021-03-05 56410000 57225000 54500000 56654000  8355.347\n4 UPBIT.KRW-… 2021-03-04 57933000 59159000 55600000 56426000 11821.03 \n5 UPBIT.KRW-… 2021-03-03 56007000 59640000 55662000 57933000 10755.95 \n6 UPBIT.KRW-… 2021-03-02 56438000 57405000 54657000 56000000  9266.678\n\nubci_get(loc$code[1], to=\"2018-05-15\")\n\n\n# A tibble: 0 × 7\n# … with 7 variables: code <chr>, date <date>, open <dbl>,\n#   high <dbl>, low <dbl>, close <dbl>, volume <dbl>\n\nubci_get(loc$code[1], from=\"2018-05-10\", to=\"2018-05-15\")\n\n\n# A tibble: 0 × 7\n# … with 7 variables: code <chr>, date <date>, open <dbl>,\n#   high <dbl>, low <dbl>, close <dbl>, volume <dbl>\n\n라이선스 문제\nubci와 시세는\n라이선스가 다를텐데요. ubci는 메인 페이지에서\n데이터 라이선스와 법적 이슈에 대해 고지하고 있습니다. 시세는 제가\n못찾은건지 데이터관런 라이선스 고지를 찾을 수가 없네요.\nubci는 비영리 배포에\n대해 허용하고 있어 마음껏 작성하였구요. 시세는 하는김에 라는 느낌이라서\n업비트에서 뭐라고 하면 내릴 계획입니다.\n패키지 계획\n만들다 보니 ubci의\n세부 정보(ex> 구성 화폐시세와 비율, 추가 설명 등)가 함께 있으면\n좋겠다 싶어서 추가하려고 계획하고 있습니다. 시세쪽은 지금은 데일리만\n있는데, 분단위 정보를 제공하기는 하더라구요. 비정상 이용에 대해 막을\n가능성이 높긴 하지만, 제한적으로나마 분단위나 15분 단위의 데이터를\n제공하는 함수를 만들 수 있을 것 같습니다.\n깃헙주소는 https://github.com/mrchypark/ubci 입니다. 재밌게 보신\n분들은 별이라도 한번 눌러주시구요. 설명의 추가나 위에 예정중인 함수\n작성, 테스트 케이스 작성등 패키지 개발을 위해서 아직 남은 일이 많은데요.\n도움 주시는 분이 계시면 정말 감사할 것 같습니다.\n언제나처럼 문의나 잘못된 점 등 알려주시면 반영하겠습니다.\n감사합니다.\np.s 간단한 분석을 포함한 영문 포스팅을 해주실 용자분을 찾습니다.\n해외에서도 관심가질만한 주제라고 생각해서 소개하고 싶은데, 제가 능력이\n안되네요. 감사합니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106495895-9558e080-64ff-11eb-9fd5-9d5ffeea0fcc.png",
    "last_modified": "2022-04-05T15:24:28+00:00",
    "input_file": {}
  },
  {
    "path": "post/패키지-소개-네이버-뉴스와-다음-뉴스의-댓글-가져오기/",
    "title": "[패키지 소개] 네이버 뉴스와 다음 뉴스의 댓글 가져오기",
    "description": "DNH4가 댓글 수집을 드디어 지원합니다. 덕분에 N2H4도 함께 홍보합니다.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2018-05-14",
    "categories": [
      "R",
      "N2H4",
      "DNH4",
      "comment",
      "forkonlp"
    ],
    "contents": "\n\n한줄요약\nDNH4가 드디어(!) 댓글 수집을 지원합니다.\n처음 naverNewsParser를 습작처럼 시작하고, N2H4 패키지로 이전하면서 여러 경험을 했습니다. naverNewsParser는 기가막히게도 책에 실린 모양이더군요. 고학력자들에게 석사 논문 낭독이 거대한 괴롭힘이듯 naverNewsParser가 약간 저에게 그런 역할을 해주는 것 같습니다. (물론 사용해 주시는 모든 분들 감사드립니다.)\n이렇게 저렇게 패키지를 뭐라도 만들어 보고, 그 이후로도 많은 일들이 있었습니다. N2H4 패키지는 저에게 많은 생각을 하게 만들어주었죠.\n조금 익숙해지고 난 이후에는 다음 뉴스를 대상으로 하는 비슷한 패키지를 만들어야 겠다는 생각을 했습니다. 그래서 몇 시간만에 N2H4 패키지의 골격을 가져와 모양만 갖춘게 DNH4 패키지입니다. 날짜를 보니 2016년 11월이네요. 이것저것 되게 하려고 노력하다가 의외의 장애물이 댓글 수집이었습니다. 방법을 몰라 방치한지 2년 가까이 된 패키지를 포스트에 올리는 이유는 드디어(!) 댓글 수집을 지원합니다.\n다음 뉴스 수집 패키지 DNH4\nDNH4 패키지는 N2H4처럼 github에서 호스팅하고 있습니다. 아래의 코드로 설치 & 로드하여 사용할 수 있습니다.\n\n\n# remotes::install_github(\"forkonlp/DNH4\")\nlibrary(DNH4)\n\n\n\nN2H4 패키지와 함수명이 같기 때문에 library()는 조심해 주셔야 합니다. DNH4 패키지는 6개의 함수를 우선 지원합니다.참조\ngetContent() 함수는 역시 기사 url을 입력으로 받아 관련 내용을 크롤링해 옵니다. getMainCategory() 함수는 기사의 대분류 항목을 가져옵니다. getSubCategory() 함수는 기사의 소분류 항목을 가져옵니다. 다음 뉴스는 카테고리가 대분류와 소분류만 있습니다. getUrlListByCategory() 함수는 뉴스 리스트 페이지에서 기사의 제목과 링크를 가져옵니다. getMaxPageNum() 함수는 뉴스 리스트 페이지의 마지막 페이지 번호를 가져옵니다. getComment() 함수는 기사 url을 입력으로 받아 그 기사의 댓글 정보를 가져옵니다.\n말씀드린 것처럼, 다음 뉴스의 댓글 수집은 여러 권한 단계를 거쳐 제 짧은 실력으로는 그 동안 가져오지 못했습니다. 물론 셀레늄을 사용하면 이런 고민을 하지 않습니다만, 역시 속도 문제를 무시할 수 없는 것 같습니다. 그럼 이제 getComment() 함수를 사용해 보겠습니다.\n댓글 수집 함수\n우선 댓글이 많은 뉴스를 하나 골라봅시다. 제가 작성하는 시점으로 댓글이 3,000개가 넘는 기사로 해보겠습니다.\n\n\ncomments <- DNH4::getComment(\"http://v.media.daum.net/v/20180513202105651\")\ncomments\n\n\n# A tibble: 10 × 25\n          id   postId forumId parentId type    status flags rating\n       <int>    <int>   <int>    <int> <chr>   <chr>  <int>  <int>\n 1 250018687 31383325     -99        0 COMMENT S        256      0\n 2 250019139 31383325     -99        0 COMMENT S          0      0\n 3 250023503 31383325     -99        0 COMMENT S        256      0\n 4 250021353 31383325     -99        0 COMMENT S        256      0\n 5 250020406 31383325     -99        0 COMMENT S        256      0\n 6 250022883 31383325     -99        0 COMMENT S        256      0\n 7 250019409 31383325     -99        0 COMMENT S        256      0\n 8 250019687 31383325     -99        0 COMMENT S          0      0\n 9 250022914 31383325     -99        0 COMMENT S        256      0\n10 250019357 31383325     -99        0 COMMENT S        256      0\n# … with 17 more variables: content <chr>, createdAt <chr>,\n#   updatedAt <chr>, childCount <int>, likeCount <int>,\n#   dislikeCount <int>, user_id <int>, user_status <chr>,\n#   user_providerId <chr>, user_displayName <chr>,\n#   user_commentCount <int>, user_providerUserId <chr>,\n#   user_flags <int>, user_username <chr>, user_roles <chr>,\n#   user_title <chr>, user_type <chr>\n\ngetComment() 함수는 몇 가지 옵션이 있습니다. limit은 가져오는 댓글의 갯수로 기본 10개로 설정되어 있습니다. 전체 댓글수를 가져오는 함수가 필요하다는 것을 확인하는 시점이네요. parentId는 대댓글등을 가져올 때 사용하는 옵션으로, 기본값 0에서 바꾸실 일이 거의 없을 겁니다. sort는 역시 추천순와 최신순 두 가지 옵션을 제공합니다. type은 결과값을 주는 형태를 의미합니다. 옵션은 df와 list가 있으며 원래 제공하는 자료형이 json이기 때문에 list가 익숙하진 분들은 list 자료형을 권장합니다. 기본값은 df 입니다. 댓글의 상황에 따라 Warning messages가 나오는데 무시하셔도 좋습니다. 내용상 신경이 쓰이시면 list를 직접 다루어 보시는 것도 좋은 공부가 될 것입니다.\n네이버 뉴스 댓글 가져오기\n네이버 뉴스 수집 패키지 역시 같은 함수를 가지고 있습니다. 우선 아래 코드로 패키지를 설치하고 로드합니다.\n\n\n# remotes::install_github(\"forkonlp/N2H4\")\nlibrary(N2H4)\n\n\n\n대상이 될만한 기사를 선정하려고 하다보니, 기왕 같은 뉴스면 좋겠다 싶어 가져왔습니다.\n\n\ncomments <- N2H4::getComment(\"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=214&aid=0000833933\")\ncomments\n\n\n<<<<<<< HEAD\n# A tibble: 10 × 81\n=======\n# A tibble: 10 × 80\n>>>>>>> 9bed6d853c3acf66b03709d93ffdf542556e9725\n   ticket objectId     categoryId templateId commentNo parentCommentNo\n   <chr>  <chr>        <chr>      <chr>      <chr>     <chr>          \n 1 news   news214,000… *          default_e… 13435975… 1343597525     \n 2 news   news214,000… *          view_econ… 13435957… 1343595725     \n 3 news   news214,000… *          default_e… 13435895… 1343589535     \n 4 news   news214,000… *          view_econ… 13435368… 1343536845     \n 5 news   news214,000… *          view_econ… 13434077… 1343407745     \n 6 news   news214,000… *          view_econ… 13433325… 1343332545     \n 7 news   news214,000… *          view_econ… 13433135… 1343313585     \n 8 news   news214,000… *          view_econ… 13432001… 1343200155     \n 9 news   news214,000… *          view_econ… 13431857… 1343185745     \n10 news   news214,000… *          view_econ… 13431465… 1343146585     \n<<<<<<< HEAD\n# … with 75 more variables: replyLevel <int>, replyCount <int>,\n=======\n# … with 74 more variables: replyLevel <int>, replyCount <int>,\n>>>>>>> 9bed6d853c3acf66b03709d93ffdf542556e9725\n#   replyAllCount <int>, replyPreviewNo <lgl>, replyList <lgl>,\n#   imageCount <int>, imageList <lgl>, imagePathList <lgl>,\n#   imageWidthList <lgl>, imageHeightList <lgl>, commentType <chr>,\n#   stickerId <lgl>, sticker <lgl>, sortValue <dbl>, contents <chr>,\n#   userIdNo <chr>, exposedUserIp <lgl>, lang <chr>, country <chr>,\n#   idType <chr>, idProvider <chr>, userName <chr>, …\n\n네이버 뉴스의 댓글은 훨씬 풍부한 정보를 제공하여(구조가 복잡해서…) df를 기능상 제공하지 않습니다. 대신 댓글만 보는 부분을 안내해 드리고 있습니다.\n\n\ncomments$result$commentList[[1]]\n\n\nNULL\n\n그냥 위 모양으로라도 제공하는게 맞는가 싶어 급하게 업데이트 했습니다. N2H4 패키지의 getComment() 함수도 type을 지원하며, 기본값은 df이고 모든 데이터를 확인하기 위해서 list를 선택하시면 좋을 것 같습니다.\n\n\nN2H4::getComment(\"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=214&aid=0000833933\",\n                 type = \"list\")\n\n\n$success\n[1] TRUE\n\n$code\n[1] \"1000\"\n\n$message\n[1] \"요청을 성공적으로 처리하였습니다.\"\n\n$lang\n[1] \"ko\"\n\n$country\n[1] \"KR\"\n\n$result\n<<<<<<< HEAD\ncommentList\n1 news, news, news, news, news, news, news, news, news, news, news214,0000833933, news214,0000833933, news214,0000833933, news214,0000833933, news214,0000833933, news214,0000833933, news214,0000833933, news214,0000833933, news214,0000833933, news214,0000833933, *, *, *, *, *, *, *, *, *, *, default_economy, view_economy, default_economy, view_economy, view_economy, view_economy, view_economy, view_economy, view_economy, view_economy, 1343597525, 1343595725, 1343589535, 1343536845, 1343407745, 1343332545, 1343313585, 1343200155, 1343185745, 1343146585, 1343597525, 1343595725, 1343589535, 1343536845, 1343407745, 1343332545, 1343313585, 1343200155, 1343185745, 1343146585, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, txt, txt, txt, txt, txt, txt, txt, txt, txt, txt, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 1526301193506, 1526301073422, 1526300678769, 1526297019573, 1526288199784, 1526283570906, 1526282249099, 1526276078855, 1526275163246, 1526272157197, 정말 가난한 사람들이구나 마음이~~~~, 주민들 다바보냐 ㆍ대표 감사 다한통속이고 ᆢ비리밝혀야지, 헐~~~, 그냥 옛날 귀족과 뭐가 다름?\\n아 아니다. 귀족이 아니라 왕이나 다름 없다고 봐야 겠네.\\n내가 뭐 잘못 말했나?, 와........대단하다 대단해...., 갑질로 시작해서 여기까지 올줄은 몰랐지? 전문경영인 세우고 오너일가 싹 물러나라, 식탁도 글로벌하네..그럼 감방도 글로벌하게 세계3대 감옥으로가자..국내감방에서도 갑질할거니, 그냥 다없애주세요!얼마나 무고한 사람들이 힘들었을까\\n국외로 추방했으면 합니다!!, 공물 갖다 바치는거냐. 왕조네 왕조., 법개정해서 걍 평생 옥살이 시켜라 저런건 나와도 사회도움 절대 안된다, 37nsJ, 5HzPo, 37nsJ, 1YJyu, 7dGi7, 2mS6W, 3mIMN, 4aKKm, Q7ZE, 6f8ZY, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ko, ko, ko, ko, ko, ko, ko, ko, ko, ko, IT, KR, IT, KR, KR, KR, KR, KR, KR, KR, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, elen****, unb1****, elen****, pcw1****, iluv****, ywj2****, 77gu****, tntj****, c32h****, betl****, , , , , , , , , , , naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, 2018-05-14T21:33:13+0900, 2018-05-14T21:31:13+0900, 2018-05-14T21:24:38+0900, 2018-05-14T20:23:39+0900, 2018-05-14T17:56:39+0900, 2018-05-14T16:39:30+0900, 2018-05-14T16:17:29+0900, 2018-05-14T14:34:38+0900, 2018-05-14T14:19:23+0900, 2018-05-14T13:29:17+0900, 2018-05-14T12:33:13+0000, 2018-05-14T12:31:13+0000, 2018-05-14T12:24:38+0000, 2018-05-14T11:23:39+0000, 2018-05-14T08:56:39+0000, 2018-05-14T07:39:30+0000, 2018-05-14T07:17:29+0000, 2018-05-14T05:34:38+0000, 2018-05-14T05:19:23+0000, 2018-05-14T04:29:17+0000, 2018-05-14T21:33:13+0900, 2018-05-14T21:31:13+0900, 2018-05-14T21:24:38+0900, 2018-05-14T20:23:39+0900, 2018-05-14T17:56:39+0900, 2018-05-14T16:39:30+0900, 2018-05-14T16:17:29+0900, 2018-05-14T14:34:38+0900, 2018-05-14T14:19:23+0900, 2018-05-14T13:29:17+0900, 2018-05-14T12:33:13+0000, 2018-05-14T12:31:13+0000, 2018-05-14T12:24:38+0000, 2018-05-14T11:23:39+0000, 2018-05-14T08:56:39+0000, 2018-05-14T07:39:30+0000, 2018-05-14T07:17:29+0000, 2018-05-14T05:34:38+0000, 2018-05-14T05:19:23+0000, 2018-05-14T04:29:17+0000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 37nsJ, 5HzPo, 37nsJ, 1YJyu, 7dGi7, 2mS6W, 3mIMN, 4aKKm, Q7ZE, 6f8ZY, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, elen****, unb1****, elen****, pcw1****, iluv****, ywj2****, 77gu****, tntj****, c32h****, betl****, el****, un****, el****, pc****, il****, yw****, 77****, tn****, c3****, ben  followList count.comment count.reply count.exposeCount\n1       NULL          2475         233              2506\n  count.delCommentByUser count.delCommentByMon\n1                   1148                    11\n  count.blindCommentByUser count.blindReplyByUser count.total\n1                        0                      0        2708\n  listStatus sort bestList graph.gender.male graph.gender.female\n1    current  NEW     NULL                63                  37\n                                                                                                                                                               graph.old\n1 10, 20, 30, 40, 50, 60, 1, 6, 29, 42, 18, 4, exact, exact, exact, exact, exact, over, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE\n  graph.client graph.country graph.empty pageModel.page\n1           NA            NA       FALSE              1\n  pageModel.pageSize pageModel.indexSize pageModel.startRow\n1                 10                  10                  1\n  pageModel.endRow pageModel.totalRows pageModel.startIndex\n1               10                2475                    0\n  pageModel.totalPages pageModel.firstPage pageModel.prevPage\n1                  248                   1                  0\n  pageModel.nextPage pageModel.lastPage pageModel.current\n1                  2                 10                NA\n  pageModel.threshold pageModel.moveToLastPage\n1                  NA                    FALSE\n=======\ncommentList\n1 news, news, news, news, news, news, news, news, news, news, news214,0000833933, news214,0000833933, news214,0000833933, news214,0000833933, news214,0000833933, news214,0000833933, news214,0000833933, news214,0000833933, news214,0000833933, news214,0000833933, *, *, *, *, *, *, *, *, *, *, default_economy, view_economy, default_economy, view_economy, view_economy, view_economy, view_economy, view_economy, view_economy, view_economy, 1343597525, 1343595725, 1343589535, 1343536845, 1343407745, 1343332545, 1343313585, 1343200155, 1343185745, 1343146585, 1343597525, 1343595725, 1343589535, 1343536845, 1343407745, 1343332545, 1343313585, 1343200155, 1343185745, 1343146585, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, txt, txt, txt, txt, txt, txt, txt, txt, txt, txt, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 1526301193506, 1526301073422, 1526300678769, 1526297019573, 1526288199784, 1526283570906, 1526282249099, 1526276078855, 1526275163246, 1526272157197, 정말 가난한 사람들이구나 마음이~~~~, 주민들 다바보냐 ㆍ대표 감사 다한통속이고 ᆢ비리밝혀야지, 헐~~~, 그냥 옛날 귀족과 뭐가 다름?\\n아 아니다. 귀족이 아니라 왕이나 다름 없다고 봐야 겠네.\\n내가 뭐 잘못 말했나?, 와........대단하다 대단해...., 갑질로 시작해서 여기까지 올줄은 몰랐지? 전문경영인 세우고 오너일가 싹 물러나라, 식탁도 글로벌하네..그럼 감방도 글로벌하게 세계3대 감옥으로가자..국내감방에서도 갑질할거니, 그냥 다없애주세요!얼마나 무고한 사람들이 힘들었을까\\n국외로 추방했으면 합니다!!, 공물 갖다 바치는거냐. 왕조네 왕조., 법개정해서 걍 평생 옥살이 시켜라 저런건 나와도 사회도움 절대 안된다, 37nsJ, 5HzPo, 37nsJ, 1YJyu, 7dGi7, 2mS6W, 3mIMN, 4aKKm, Q7ZE, 6f8ZY, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ko, ko, ko, ko, ko, ko, ko, ko, ko, ko, IT, KR, IT, KR, KR, KR, KR, KR, KR, KR, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, elen****, unb1****, elen****, pcw1****, iluv****, ywj2****, 77gu****, tntj****, c32h****, betl****, , , , , , , , , , , naver, naver, naver, naver, naver, naver, naver, naver, naver, naver, 2018-05-14T21:33:13+0900, 2018-05-14T21:31:13+0900, 2018-05-14T21:24:38+0900, 2018-05-14T20:23:39+0900, 2018-05-14T17:56:39+0900, 2018-05-14T16:39:30+0900, 2018-05-14T16:17:29+0900, 2018-05-14T14:34:38+0900, 2018-05-14T14:19:23+0900, 2018-05-14T13:29:17+0900, 2018-05-14T12:33:13+0000, 2018-05-14T12:31:13+0000, 2018-05-14T12:24:38+0000, 2018-05-14T11:23:39+0000, 2018-05-14T08:56:39+0000, 2018-05-14T07:39:30+0000, 2018-05-14T07:17:29+0000, 2018-05-14T05:34:38+0000, 2018-05-14T05:19:23+0000, 2018-05-14T04:29:17+0000, 2018-05-14T21:33:13+0900, 2018-05-14T21:31:13+0900, 2018-05-14T21:24:38+0900, 2018-05-14T20:23:39+0900, 2018-05-14T17:56:39+0900, 2018-05-14T16:39:30+0900, 2018-05-14T16:17:29+0900, 2018-05-14T14:34:38+0900, 2018-05-14T14:19:23+0900, 2018-05-14T13:29:17+0900, 2018-05-14T12:33:13+0000, 2018-05-14T12:31:13+0000, 2018-05-14T12:24:38+0000, 2018-05-14T11:23:39+0000, 2018-05-14T08:56:39+0000, 2018-05-14T07:39:30+0000, 2018-05-14T07:17:29+0000, 2018-05-14T05:34:38+0000, 2018-05-14T05:19:23+0000, 2018-05-14T04:29:17+0000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 37nsJ, 5HzPo, 37nsJ, 1YJyu, 7dGi7, 2mS6W, 3mIMN, 4aKKm, Q7ZE, 6f8ZY, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, elen****, unb1****, elen****, pcw1****, iluv****, ywj2****, 77gu****, tntj****, c32h****, betl****, el****, un****, el****, pc****, il****, yw****, 77****, tn****, c3****, be****, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE\n  pageModel.page pageModel.pageSize pageModel.indexSize\n1              1                 10                  10\n  pageModel.startRow pageModel.endRow pageModel.totalRows\n1                  1               10                2475\n  pageModel.startIndex pageModel.totalPages pageModel.firstPage\n1                    0                  248                   1\n  pageModel.prevPage pageModel.nextPage pageModel.lastPage\n1                  0                  2                 10\n  pageModel.current pageModel.threshold pageModel.moveToLastPage\n1                NA                  NA                    FALSE\n>>>>>>> 9bed6d853c3acf66b03709d93ffdf542556e9725\n  pageModel.moveToComment pageModel.moveToLastPrev morePage.prev\n1                   FALSE                    FALSE 04q7zmlgkmzg8\n  morePage.next morePage.start morePage.end exposureConfig.reason\n1 04q7okqkyfpj0             NA           NA                    NA\n<<<<<<< HEAD\n  exposureConfig.status config.useSnsLogin config.lineFeedOn\n1            COMMENT_ON              FALSE             FALSE\n  config.useBest config.useVote config.useVoteSelf\n1          FALSE           TRUE              FALSE\n  config.useVoteGoodOnly config.useReport config.useCommonReport\n1                  FALSE             TRUE                  FALSE\n  config.reportAuthority config.useDeleteOnManagerReport\n1                    ALL                           FALSE\n  config.useReportSecret config.useSort config.sortTypes\n1                  FALSE           TRUE              NEW\n  config.defaultSort config.useByteLength config.useReply\n1                NEW                FALSE            TRUE\n  config.useReplyOnReply config.pageAfterReply\n1                  FALSE          TO_LAST_PAGE\n  config.maxReplyWriteBoxCount config.useAutoRefresh\n1                            0                 FALSE\n  config.useMention config.min config.max config.useSticker\n1             FALSE          1        300             FALSE\n  config.stickerOnly config.stickerSupportedCategories\n1              FALSE                                NA\n  config.stickerDefaultCategory config.stickerCategory\n1                            NA                     NA\n  config.stickerContentsUrl config.stickerKeyUrl config.stickerTabUrl\n1                        NA                   NA                   NA\n  config.stickerType config.stickerText config.stickerMarketUrl\n1                 NA              FALSE                      NA\n=======\n  exposureConfig.status count.comment count.reply count.exposeCount\n1            COMMENT_ON          2475         233              2506\n  count.delCommentByUser count.delCommentByMon\n1                   1148                    11\n  count.blindCommentByUser count.blindReplyByUser count.total\n1                        0                      0        2708\n  listStatus sort config.useSnsLogin config.lineFeedOn config.useBest\n1    current  NEW              FALSE             FALSE          FALSE\n  config.useVote config.useVoteSelf config.useVoteGoodOnly\n1           TRUE              FALSE                  FALSE\n  config.useReport config.useCommonReport config.reportAuthority\n1             TRUE                  FALSE                    ALL\n  config.useDeleteOnManagerReport config.useReportSecret\n1                           FALSE                  FALSE\n  config.useSort config.sortTypes config.defaultSort\n1           TRUE              NEW                NEW\n  config.useByteLength config.useReply config.useReplyOnReply\n1                FALSE            TRUE                  FALSE\n  config.pageAfterReply config.maxReplyWriteBoxCount\n1          TO_LAST_PAGE                            0\n  config.useAutoRefresh config.useMention config.min config.max\n1                 FALSE             FALSE          1        300\n  config.useSticker config.stickerOnly\n1             FALSE              FALSE\n  config.stickerSupportedCategories config.stickerDefaultCategory\n1                                NA                            NA\n  config.stickerCategory config.stickerContentsUrl\n1                     NA                        NA\n  config.stickerKeyUrl config.stickerTabUrl config.stickerType\n1                   NA                   NA                 NA\n  config.stickerText config.stickerMarketUrl\n1              FALSE                      NA\n>>>>>>> 9bed6d853c3acf66b03709d93ffdf542556e9725\n  config.stickerMobileResize config.useProfile config.useNaverProfile\n1                      FALSE              TRUE                   TRUE\n  config.dynamicProfile config.profileImageAreas\n1                 FALSE              LIST, WRITE\n                                                config.profileEmptyImage\n1 https://static.nid.naver.com/images/web/user/default.png?type=f132_132\n  config.displayMaskedUserId config.useManager config.managerDelete\n1                      FALSE             FALSE                FALSE\n  config.managerBlock config.managerNotice config.contentsManagerIcon\n1               FALSE                FALSE                      FALSE\n  config.secretComment config.exposureConfig\n1                FALSE                 FALSE\n  config.deleteAllAfterBlock config.useFold config.replyPreviewCount\n1                      FALSE           TRUE                        0\n  config.maxImageUploadCount config.maxImageUploadFileSize\n1                          0                             0\n  config.imageAutoRotate config.autoRefreshTime\n1                  FALSE                      0\n  config.autoRefreshDefaultOff config.autoRefreshChat\n1                        FALSE                  FALSE\n  config.maxChatFPS config.commentModify config.useCommentModify\n1                 0                FALSE                   FALSE\n  config.useViewAll config.useUserLevel config.anyUseImageExpose\n1              TRUE               FALSE                     TRUE\n  config.useImageComment config.useUrlLink\n1                  FALSE             FALSE\n  config.useCommentListIncludeDelete config.useStats\n1                              FALSE            TRUE\n  config.statsMinCount config.useUserEnvStats\n1                  100                  FALSE\n  config.countryStatsMinCount config.useConcurrentStats\n1                           0                     FALSE\n  config.useVoteStats config.useGpopCache config.useEnterSubmit\n1               FALSE               FALSE                 FALSE\n  config.useListReverse config.useTranslation config.useDeletedList\n1                 FALSE                 FALSE                  TRUE\n  config.combinedDeletedList config.displayDeletedList\n1                       TRUE                      TRUE\n  config.applyChangedNotice config.useUserCommentUi\n1                     FALSE                    TRUE\n  config.useUserCommentProfileUi config.userRecentStatsStartDate\n1                           TRUE                    1.584544e+12\n       config.userSortTypes config.useMentionLegacyFormat\n1 FAVORITE, NEW, OLD, REPLY                         FALSE\n  config.useMentionWrite config.mentionMaxCount config.useSecret\n1                  FALSE                      0            FALSE\n  config.useIdPenaltyLayer config.useRestrictWriteBySns\n1                     TRUE                        FALSE\n  config.photoInfraUploadDomain config.photoInfraSelectDomainHttp\n1                            NA               g-cbox.dv.phinf.net\n  config.photoInfraSelectDomainHttps config.pcTempThumbnailType\n1                 g-cbox.pstatic.net                    ff80_80\n  config.mobileTempThumbnailType config.realnameVerificationBlock\n1                        ff50_50                            FALSE\n  config.realnameVerificationMessage config.useBlindByReport\n1                                 NA                   FALSE\n  config.keepTextareaOnRestriction config.displayIndividualBlindOnly\n1                               NA                             FALSE\n  config.hashtagMaxLength config.useDualPagination\n1                      20                    FALSE\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             config.reportReasonList\n1 AA03, AA14, AA68, AA33, AA01, AA24, AB28, 스팸홍보/도배글입니다., 음란물입니다., 불법정보를 포함하고 있습니다., 청소년에게 유해한 내용입니다., 욕설/생명경시/혐오/차별적 표현입니다., 개인정보 노출 게시물입니다., 불쾌한 표현이 있습니다., 사행성 오락이나 도박을 홍보하거나 권장하는 내용 등의 부적절한 스팸 홍보 행위, 동일하거나 유사한 내용 반복 게시, 성적 수치심을 일으키는 내용, 아동이나 청소년을 성 대상화한 표현, 과도하거나 의도적인 신체 노출, 음란한 행위와 관련된 부적절한 내용, 불법 행위, 불법 링크에 대한 정보 제공, 불법 상품을 판매하거나 유도하는 내용, 가출/왕따/학교폭력/자살 등 청소년에게 부정적인 영향을 조성하는 내용, 직·간접적인 욕설을 사용하여 타인에게 모욕감을 주는 내용, 생명을 경시여기거나 비하하는 내용, 계층/지역/종교/성별 등을 혐오하거나 비하하는 표현, 신체/외모/취향 등을 경멸하는 표현, 법적으로 중요한 타인의 개인정보를 게재, 당사자 동의 없는 특정 개인을 인지할 수 있는 정보, 불쾌한 표현 포함 [해당 사유는 클린봇 학습에 도움이 될 수 있습니다.] \n  config.displayReportLayer config.useHideAfterReport\n1                      TRUE                      TRUE\n  config.useCleanbot config.cleanbotEnforced\n1               TRUE                   FALSE\n  config.cleanbotServiceStepUI config.useCommentLinkToken\n1                            2                       TRUE\n  config.useUserBlock config.useUserBlockNaverIdType\n1                TRUE                           TRUE\n  config.useUserBlockNeoIdType config.useUserBlockProifleImageUi\n1                        FALSE                              TRUE\n  config.useChoice config.useNcc config.useRating\n1            FALSE         FALSE            FALSE\n  config.ratingUseSingleType config.useScore config.scoreScale\n1                      FALSE           FALSE                 0\n<<<<<<< HEAD\n  config.scoreSelectorCount config.useFollow config.useManagerLike\n1                         0            FALSE                 FALSE\n  config.usePick config.pickLimit config.pickManagerLimit\n1          FALSE                0                       0\n  config.useLMP\n1         FALSE\nconfig.blindReportReasonList\n1 AA03, AA14, AA68, AA33, AA01, AA24, AB28, 스팸홍보/도배글입니다., 음란물입니다., 불법정보를 포함하고 있습니다., 청소년에게 유해한 내용입니다., 욕설/생명경시/혐오/차별적 표현입니다., 개인정보 노출 게시물입니다., 불쾌한 표현이 있습니다., 사행성 오락이나 도박을 홍보하거나 권장하는 내용 등의 부적절한 스팸 홍보 행위, 동일하거나 유사한 내용 반복 게시, 성적 수치심을 일으키는 내용, 아동이나 청소년을 성 대상화한 표현, 과도하거나 의도적인 신체 노출, 음란한 행위와 관련된 부적절한 내용, 불법 행위, 불법 링크에 대한 정보 제공, 불법 상품을 판매하거나 유도하는 내용, 가출/왕따/학교폭력/자살 등 청소년에게 부정적인 영향을 조성하는 내용, 직·간접적인 욕설을 사용하여 타인에게 모욕감을 주는 내용, 생명을 경시여기거나 비하하는 내용, 계층/지역/종교/성별 등을 혐오하거나 비하하는 표현, 신체/외모/취향 등을 경멸하는 표현, 법적으로 중요한 타인의 개인정보를 게재, 당사자 동의 없는 특정 개인을 인지할 수 있는 정보, 불쾌한 표현 포함 [해당 사유는 클린봇 학습에 도움이 될 수 있습니다.] \n  notice.noticeNo                                    notice.title\n1              41 '언론사별 댓글 선택제'에 대해 안내 말씀드립니다\n=======\n  config.scoreSelectorCount config.useManagerLike config.usePick\n1                         0                 FALSE          FALSE\n  config.pickLimit config.pickManagerLimit config.useLMP\n1                0                       0         FALSE\nconfig.blindReportReasonList\n1 AA03, AA14, AA68, AA33, AA01, AA24, AB28, 스팸홍보/도배글입니다., 음란물입니다., 불법정보를 포함하고 있습니다., 청소년에게 유해한 내용입니다., 욕설/생명경시/혐오/차별적 표현입니다., 개인정보 노출 게시물입니다., 불쾌한 표현이 있습니다., 사행성 오락이나 도박을 홍보하거나 권장하는 내용 등의 부적절한 스팸 홍보 행위, 동일하거나 유사한 내용 반복 게시, 성적 수치심을 일으키는 내용, 아동이나 청소년을 성 대상화한 표현, 과도하거나 의도적인 신체 노출, 음란한 행위와 관련된 부적절한 내용, 불법 행위, 불법 링크에 대한 정보 제공, 불법 상품을 판매하거나 유도하는 내용, 가출/왕따/학교폭력/자살 등 청소년에게 부정적인 영향을 조성하는 내용, 직·간접적인 욕설을 사용하여 타인에게 모욕감을 주는 내용, 생명을 경시여기거나 비하하는 내용, 계층/지역/종교/성별 등을 혐오하거나 비하하는 표현, 신체/외모/취향 등을 경멸하는 표현, 법적으로 중요한 타인의 개인정보를 게재, 당사자 동의 없는 특정 개인을 인지할 수 있는 정보, 불쾌한 표현 포함 [해당 사유는 클린봇 학습에 도움이 될 수 있습니다.] \n  bestList graph.gender.male graph.gender.female\n1     NULL                63                  37\n                                                                                                                                                               graph.old\n1 10, 20, 30, 40, 50, 60, 1, 6, 29, 42, 18, 4, exact, exact, exact, exact, exact, over, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE\n  graph.client graph.country graph.empty notice.noticeNo\n1           NA            NA       FALSE              41\n                                     notice.title\n1 '언론사별 댓글 선택제'에 대해 안내 말씀드립니다\n>>>>>>> 9bed6d853c3acf66b03709d93ffdf542556e9725\nnotice.content\n1 안녕하세요, 네이버 뉴스입니다.\\r<br>​\\r<br>네이버 뉴스는 2018년 10월부터 각 언론사가 해당 매체 기사의 댓글 제공 방식을 직접 선택하여 운영하는 '언론사별 댓글 선택제'를 시행하고 있습니다.\\r<br> \\r<br>2021년 8월부터 '언론사별 댓글 선택제'를 강화하여 언론사는 '개별 기사 단위'로 제공 여부를 설정할 수 있습니다. \\r<br>[개별 기사 단위 댓글 제공여부 설정기능은 기존에 제공되던 섹션단위 댓글 설정을 언론사들의 요청에 따라 개별 기사별로 모든 댓글의 정책을 언론사에서 결정할 수 있도록 제공드린 것입니다.]\\r<br>​\\r<br>각 언론사는 댓글 정렬의 노출 순서, 그리고 기본 정렬값을 섹션별로 직접 설정하고 있습니다. \\r<br>​\\r<br>언론사가 직접 설정해 제공하는 정렬방식은 순공감순, 공감비율순, 답글순, 최신순, 과거순 5가지이며,\\r<br>각 정렬별 산출기준은 아래와 같습니다.\\r<br>​\\r<br>최신순 : 등록시간이 최근 순\\r<br>과거순 : 등록시간이 오래된 순\\r<br>답글순 : 답글이 많은 순\\r<br>순공감순 : 공감수에서 비공감수를 뺀 수치가 높은 순 : [공감수 - 비공감수]\\r<br>공감비율순 : 전체 공감수와 비공감수 중 공감수 비율이 높은 순 : 공감수 ÷ [ 공감수 + 비공감수 ]\\r<br>                   * 단, 공감과 비공감수 합이 5미만인 경우에는 0으로 처리\\r<br> \\r<br>댓글서비스가 보다 투명하고 사용자 만족도가 높아질 수 있는 환경이 될 수 있도록 지속적으로 보완해 가겠습니다. \\r<br>​감사합니다​\n            notice.regTime\n1 2022-02-08T16:21:56+0900\n\n$date\n<<<<<<< HEAD\n[1] \"2022-04-05T15:05:49+0000\"\n=======\n[1] \"2022-04-05T05:24:53+0000\"\n>>>>>>> 9bed6d853c3acf66b03709d93ffdf542556e9725\n\nattr(,\"row.names\")\n[1] 1\n\n드디어 다음 댓글을 가져올 수 있게 된 만큼, 많은 분들이 DNH4 패키지도 찾아주시리라 기대합니다. DNH4 패키지는 ForkonLP 프로젝트의 일부입니다.\n언제나 그렇듯, 잘못된 내용이 있거나 문제가 생기면 언제든지 알려주세요. 감사합니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106492737-9daf1c80-64fb-11eb-8739-beb6c28e89e0.png",
    "last_modified": "2022-04-05T15:24:28+00:00",
    "input_file": {}
  },
  {
    "path": "post/kospacing-한글-띄어쓰기-패키지를-사용해보자/",
    "title": "[KoSpacing] 한글 띄어쓰기 패키지를 사용해보자",
    "description": "KoSpacing은 한글 띄어쓰기를 해주는 딥러닝 모델 패키지이다. python이 함께 필요한 패키지 기반으로 만들어서 python도 설치해야 한다. windows는 conda만 지원하므로 conda를 설치하여 사용해보자.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2018-05-02",
    "categories": [
      "R",
      "KoSpacing",
      "installr",
      "keras",
      "conda",
      "reticulate"
    ],
    "contents": "\n\nContents\n업데이트\n\n\n업데이트\n패키지의 설치 문제가 보고되어 확인하였습니다. 새롭게 설치를 진행하시고, 0.1.1 버전인 것을 확인하시면 문제없이 동작할 것입니다. 0.1.1 버전에서는 conda 명령이 실행가능한 상태여야 합니다.\nconda를 설치하는 conda4r 패키지를 소개하는 포스트를 작성하였습니다.\n세줄요약\nKoSpacing은 한글 띄어쓰기를 해주는 딥러닝 모델 패키지이다.\npython이 함께 필요한 패키지 기반으로 만들어서 python도 설치해야 한다.\nwindows는 conda만 지원하므로 conda를 설치하여 사용해보자.\n한글 띄어쓰기 API 이용하는 포스트에서 소개했던 API가 R & Python 패키지로 탄생하였습니다. (R 패키지 바로가기, Python 패키지 바로가기) 이같은 멋진 패키지를 개발해주신 전희원님님 감사합니다.\nKoSpacing 패키지는 전례가 없는 딥러닝 모델로 결과를 만드는 패키지로 본인의 포스트에서 Model as a Program 이라고 소개한바 있습니다. R에는 tensorflow와 keras가 reticulate 패키지를 이용해서 python 패키지를 기반으로 최신 딥러닝 프레임워크를 사용할 수 있습니다. KoSpacing은 keras로 작성된 모델을 사용하기 때문에, 패키지 사용을 위해서 reticulate 설치가 필요합니다. KoNLP 역시 java 기반의 라이브러리를 R에서 사용하기 위해 rJava 설치가 필요했습니다. java의 경로 설정에 비해 간편하긴 하지만 python을 또 설치해야 한다는 압박이 있을 수 있다고 생각이 들었습니다. 간편하게 R에서 사용하는 도구들의 설치를 도와주는 installr를 이용해서 miniconda를 설치해 보겠습니다.\ninstallr\ninstallr 패키지는 windows 환경에서 R에서 사용하는 여러 외부 프로그램들(pandoc, latex, 등등)을 콘솔 명령으로 설치해주고, R의 버전 업데이트 등을 할 수 있는 함수를 제공합니다. 완전히 Rphabetic(알파베틱)하죠. unix 계열(mac 포함)은 완전히 같은 기능을 제공하는 패키지가 없다는 점이 조금 아쉽습니다.\nRtools를 설치하지 않으셨다면 아래 두 줄을 콘솔에서 실행해주세요.\ninstall.packages('installr')\ninstall.Rtools()\n이제 devtools를 설치하고 최신 버전의 installr를 설치하도록 하겠습니다.\nif (!require('devtools')) install.packages('devtools')\ndevtools::install_github('talgalili/installr')\n최신 버전의 installr 패키지는 install.conda() 함수를 제공합니다. 이를 이용해서 KoSpacing 환경을 설치해보겠습니다.\nlibrary(installr)\ninstall.conda()\ninstall.conda() 함수는 windows 환경에 miniconda의 설치 파일을 다운 받아 실행해 줍니다. 다운로드 페이지에서 자신에게 맞는 설치 파일을 다운로드 받아 실행하셔도 같은 동작을 하는 것입니다. 기본 옵션들을 유지한 채로 계속 다음을 눌러 설치를 완료해 주세요.\n이제 KoSpacing을 설치해 보겠습니다.\nif (!require('remotes')) install.packages('remotes')\nremotes::install_github('haven-jeon/KoSpacing')\nlibrary(KoSpacing)\n잘 되셨나요? 저와는 조금 다른 메세지들이 보이실 수도 있습니다만, 마지막 library(KoSpacing)이 잘 수행되면 성공인 겁니다! loaded KoSpacing model! 메세지를 확인하셨나요?\n이제 패키지를 사용해볼까요?\nspacing(\"김형호영화시장분석가는'1987'의네이버영화정보네티즌10점평에서언급된단어들을지난해12월27일부터올해1월10일까지통계프로그램R과KoNLP패키지로텍스트마이닝하여분석했다.\")\nR에서 keras를 사용하기 위해서 python이 설치되어 있어야 합니다. windows는 conda만 사용할 수 있습니다. macOS와 linux 계열은 pip, virtualenvs도 사용할 수 있습니다. installr 패키지는 windows 설치용 패키지라는 것을 잊지 마세요.\n잘못된 내용이 있거나 문제가 생기면 언제든지 알려주세요. 감사합니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106488771-6474ad80-64f7-11eb-8ef2-6c3d41e24898.png",
    "last_modified": "2022-04-05T15:17:01+00:00",
    "input_file": {}
  },
  {
    "path": "post/r로나만의-웹페이지-만들기-2탄-github-pages/",
    "title": "[R로나만의] 웹페이지 만들기 2탄 Github pages",
    "description": "github pages로 나만의 웹페이지를 만들 수 있다. `.Rmd` 파일로 웹개발 지식없이 웹페이지를 만들자. 파일 이름이 곧 주소이고, index는 관례적으로 생략이 가능하다.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2018-03-24",
    "categories": [
      "R",
      "github",
      "web",
      "R로나만의",
      "Rmd",
      "github pages"
    ],
    "contents": "\n\n세줄요약\ngithub pages로 나만의 웹페이지를 만들 수 있다.\n.Rmd 파일로 웹개발 지식없이 웹페이지를 만들자.\n파일 이름이 곧 주소이고, index는 관례적으로 생략이 가능하다.\n드디어 blogdown을 사용하기 위한 필수 내용을 설명하는 포스트를 작성하네요. 제 느린 속도를 생각하면 감개가 무량합니다. ㅎㅎㅎ 그럼 시작해 볼까요?\n\nGithub pages는 <계정이름>.github.io라는 주소를 제공하는 정적 웹 호스팅 서비스입니다. Jekyll을 기본 엔진으로 하여 마크다운 문서로 블로그나 홈페이지를 운영할 수도 있죠. 아무튼 오늘은 .html 파일과 .md 파일로 <계정이름>.github.io의 하위주소로 웹에 공개하는 방법을 소개하겠습니다.\n설명드릴 내용은 아래 세 가지입니다.\n<계정이름>.github.io의 주소와 <계정이름>.github.io/<저장소이름> 주소로 웹페이지를 게시하는 것\n.md 파일과 .html 파일\n파일을 저장해야 하는 위치(root, docs, gh-pages branch)\n우선, 가장 간단한 조합인 폴더의 root 위치에 .md 파일로 <계정이름>.github.io/<저장소이름>에 게시를 해보겠습니다. 지난 포스트에서 만들었던 myfirestrepo를 사용해 보겠습니다.\n\n지난 포스트를 따라 오셨다면 저처럼 https://github.com/<계정이름>/myfirestrepo가 있을겁니다. 이걸로 페이지를 만들 준비가 끝났습니다. 페이지 설정을 같이 따라가 볼까요?\n\nCode, Issues, Pull requests 가 있는 탭의 오른쪽 마지막에 Settings가 있습니다. 자신의 저장소에서만 보이는 옵션이니 회원가입하고 저장소를 만드셔야 따라오실 수 있습니다.\n\n스크롤을 조금 내리면 드디어 GitHub Pages가 나옵니다. Source와 Theme Chooser가 있는데, Theme Chooser는 나중에 설명하고, Source를 같이 보시죠. 현재 None으로 되어있는데요, 클릭을 한 번 해볼까요?\n\nNone 말고 다른 옵션이 2개 더 있네요. 하나는 master branch, 다른 하나는 master branch /docs folder 입니다. 각 옵션은 설정이 가능할 때, 즉 호스팅할 파일이 있을 때 선택할 수 있습니다. 지금 /docs 폴더가 저장소내에 없기 때문에 2번째 옵션은 선택할 수 없어요. 우선 기본 위치를 사용하는 master branch를 설정해 보겠습니다. 첫 번째 옵션을 선택하고 오른쪽에 Save 버튼을 클릭해주세요.\n\n설정이 저장되었다는군요.\n\n다시 GitHub Pages로 가보면 많은 것이 변해있습니다. 우선 https://mrchypark.github.io/myfirestrepo/ 주소로 사이트가 게시 준비가 되었다네요!\n\n조금 기다려보면 이렇게 사이트가 게시되었다고 변한 녹색 알림을 볼 수 있습니다. 새로고침을 해서 확인해보세요! 그럼 주소를 따라 이동해볼까요?\n파란색 주소를 클릭하시면 됩니다.\n\n와! 드디어 github pages로 웹페이지를 게시했습니다! 이 간단한 페이지가 뭘로 만들어진거냐 하면…\n\n처음 프로젝트 만들 때 체크로 만들었던 README.md 파일로 만들어진 겁니다. 그렇다면 마크다운 문법으로 README.md 파일을 바꾸면 웹 페이지 내용을 바꿀 수 있겠군요. 그래도 우리는 R로 만들꺼니까, .Rmd로 .md를 만들어 봅시다.\n새로 시작해봅시다.\n이전 포스트와 같이 할건데 라이선스는 지정하지 말고, 저장소 이름은 마음대로 해보겠습니다. 어떤 보고서를 업로드할 꺼라면, 주소가 그 내용을 반영하고 있으면 좋을 것 같네요. 저는 rmdhosting이라고 해보겠습니다.\n\nRstudio로 프로젝트를 시작하면서 위 저장소로 시작해볼까요?\n\n위 화면의 오른쪽 아래처럼 파일이 3개가 있다면 잘 따라오신겁니다. 혹시 잘 안되시면 댓글로 질문주시거나 이전 포스트를 다시 확인해주세요. 그럼 이제 Rpubs 소개 포스트에서 한 것처럼 .Rmd 파일을 만들겠습니다. 대신 선택을 다른걸 할껀데요.\n\n위처럼 R markdown...을 만드는 팝업창을 켜고, From Template 탭을 확인하겠습니다.\n\n반가운 이름이 보이는군요! GitHub Document (Markdown)을 선택하고 OK를 눌러 만들어보겠습니다.\n\n.Rmd 파일이 만들어졌습니다. 저장을 해주세요. 물론 필요한 내용으로 수정해야겠죠?\n\n저는 우선 index 라고 저장하겠습니다. 모두 같은 이름으로 따라해주세요. 처음에 .Rmd로 설정해서 새로 만들었기 때문에 확장자를 지정하지 않아도 됩니다.\n\n그럼 이제 Knit 버튼을 눌러볼까요!?!\n\nRpubs 소개 포스트에서는 여기서 Publish 버튼을 누르는 것으로 진행했었습니다. 선택도 기본 html이었던것 같군요.\n이번에는 창을 닫고 다시 파일들을 확인해보겠습니다.\n\nindex.Rmd 파일은 제가 만든건데, Knit 버튼을 누름으로써 index.md로 변환이 되었군요. index_files 폴더도 새로 생겼습니다. index_files 폴더는 보통 .md 파일로 변환하는 과정에서 생기는 그림 파일들을 저장하는 곳입니다. 자동으로 일이 진행되니 자세히 알고 있을 필요는 없습니다.\ngithub에 업로드\n이제 git을 이용해서 github에 push 해볼껀데요. 저희 입장에서는 업로드와 같지만, git의 방법을 따라할겁니다.\n우선 오른쪽 위 창에서 git 탭을 클릭해보세요. 없다면 github 저장소를 이용해서 프로젝트를 만든 것이 아닙니다. 이전 포스트를 확인해주세요.\n\n저 같이 여러 리스트가 나올 건데요. 내용은 git에 대한 것이므로 (언제가 될지 모르는) 나중에 다루도록 하구요. Commit 버튼을 눌러보겠습니다.\n\n또 새로운 창이 뜹니다. 여기는 Commit을 하는 곳입니다. 파일들이 변경된 상태를 저장하는 것이라고 이해하면 좋을 것 같아요. 전부 저장해 볼까요?\n\n파일을 전부 선택합니다.\n\n그리고 파일 위에 Stage 버튼을 눌러 Staged 박스를 전부 체크합니다.\n\n방금 과정 말고 Staged 박스를 하나씩 클릭해도 됩니다.\n\n\n오른쪽에 Commit message 칸에 지금 저장하는 상태에 대해 간단한 설명글을 씁니다. 이건 git의 기능으로 필수이기 때문에 뭐라도 적어주세요.\n그리고 Commit 버튼을 눌러볼까요?\n\nCommit을 어떻게 했다는 이러저러한 설명이 나오네요. 잘 된거 같으니 확인 버튼을 누르겠습니다.\n다음 버튼은 오른쪽 가장 위에 있는 push 버튼입니다. push는 Commit된 내용들을 원격 저장소에 보낸다는 뜻입니다. 업로드랑 비슷하죠? 그럼 클릭해볼까요.\n\n뭐라고 뭐라고 하다가…\n\n이렇게 master -> master라는 메세지가 뜨면 잘 push(업로드)가 된 것입니다. github 웹 페이지로 가서 잘 진행이 됬는지 확인해보죠.\n\n잘 된거 같습니다! 처음에는 만들지 않았던 파일들이 보이구요. 다행히도 Rstudio에서 만들어서 push 한 것들이네요!\n그럼 위에서 한 것처럼, setting으로 가서 github pages를 설정해볼까요? 지금 파일들이 master branch에 있으니 선택해서 저장해보겠습니다.\n\n사이트가 호스팅할 준비가 되었다고 하네요.\n\n이제 다 되었습니다!\n한번 주소를 클릭해서 잘 호스팅되고 있는지 확인해볼까요?\n\n이렇게 허탈한 화면을 볼 수도 있습니다. 새로고침을 좀 해보셔도 안되면 README.md 파일을 한번 지워보세요. 지우는 방법은 2가지가 있는데, 하나는 Rstudio에서 지운후 Commit하고 Push하는 것이구요. 다른 하나는 Github 웹 페이지에서 바로 지우는 겁니다. 간단한 동작들은 Github 웹 페이지에서 기능을 제공합니다.\n\n이 창에서 README.md 파일을 클릭해주세요.\n\n이 화면이면 맞습니다. 오른쪽 끝에 보니 모니터, 펜, 쓰레기통 버튼이 보이는군요. 더 말하지 않아도 느낌이 오시죠?!\n\n역시 쓰레기통 버튼이었습니다. 클릭해볼께요!\n\n역시 git의 관리를 받는 파일들이라 파일을 지우는 것도 어떤 상태인 모양입니다. 파일이 지워진 상태를 Commit하는 창이 나오는군요.\n\n스크롤을 내려서 초록색 버튼인 Commit changes를 클릭합니다. Commit message는 기본값이 있어서 알아서 저장이 되는데요. 바꾸고 싶으시면 다르게 작성하셔도 됩니다. 지금은 기본값으로 Delete READM.md가 들어가 있네요. 저는 마음에 드니까 그냥 두겠습니다.\n\n파일이 성공적으로 지워졌다고 합니다.\n\nREADME.md 파일은 Github에서 관심가지는 것이라고 설명드렸었나요? 파일이 없으니까 만드는게 어떻겠냐고 제안하네요. 어쨌든 무시하고 우리의 웹 페이지 주소로 다시 가보겠습니다.\n\nhttps://mrchypark.github.io/rmdhosting/\n\n각자의 웹 페이지 주소의 구조는 https://<계정명>.github.io/<저장소명>/ 입니다. 제것과 비교해서 어떻게 다른지 한번 확인해보세요.\n이제 들어가면 우리가 보고 싶은 화면이 나옵니다.\n\n수고하셨습니다!\n앞으로도 설명드릴 내용이 많지만 이번 포스트는 여기서 마무리해야겠네요.ㅎㅎ\nP.S 혹시 만약에라도 파일을 만드실 때 index.Rmd로 하지 않으셔서 index.md 파일이 없으시다면 아직도 이 화면을 보지 못하고 계실겁니다. 이 때는 https://<계정명>.github.io/<저장소명>/<파일명> 주소를 확인해주세요.\n\n제가 만든건 https://<계정명>.github.io/<저장소명>/<파일명> 으로도 동작하는군요?!? try.md같은 파일이라면 <파일명> 부분을 try라고 해주시면 됩니다. 제 경우라면 https://mrchypark.github.io/rmdhosting/try가 되겠죠. 감사합니다.\nP.S2 질문, 오타 지적, 내용 지적, 외모 지적(응?), 와드용 공유 등 모두 모두 환영합니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106488428-0f389c00-64f7-11eb-8f44-692566f62dfd.png",
    "last_modified": "2022-04-05T15:17:16+00:00",
    "input_file": {}
  },
  {
    "path": "post/github-rstudio로-github-프로젝트-시작하기/",
    "title": "[github] rstudio로 github 프로젝트 시작하기",
    "description": "github은 git의 공개 remote repo를 제공하는 서비스다. 그래서 git 사용법을 알아야 한다. Rstudio의 project를 사용하면 좀 쉽다.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2018-03-15",
    "categories": [
      "R",
      "rstudio",
      "github",
      "project"
    ],
    "contents": "\n\n세줄요약\ngithub은 git의 공개 remote repo를 제공하는 서비스다.\n그래서 git 사용법을 알아야 한다.\nRstudio의 project를 사용하면 좀 쉽다.\nGithub은 이제 코드 관리와 공유 플랫폼의 대명사입니다. R도 개발 언어로써 Github을 많이 사용할 기회가 있는데요. 코드 공유, 패키지 공유, 분석 결과 공유 정도로 쓰임새를 정리할 수 있을 것 같습니다. 이 때 많은 분들의 필요은 아마 분석 결과 공유이지 않을까 싶습니다.\n분석 결과를 공유하기 위해서 github을 사용하실 때, R의 IDE로 많이 사용하는 RStudio와 함께 사용하는 법을 소개해드릴까 합니다.\n우선 github에 repository를 만들어 시작하는 다양한 방법이 있습니다. 단적으로는 웹브라우저에서 파일 만들기나 업로드로 진행하셔도 됩니다. 각각의 방법을 설명하기 전에, github의 개념을 간단하게만 짚고 넘어가겠습니다.\n코드의 저장 상태 백업과 공유를 위해서 git은 작업하는 나의 컴퓨터 공간인 로컬 저장소(local repository)와 원격 저장소(remote repository)라는 개념으로 구분하여 사용합니다. local을 개인이 일하고 작업하는 공간, remote는 백업하고 공유하는 공간입니다.\n\n그런데 remote를 누가 그냥 주는 것도 아니고, 필요한 사람이 따로 구축해야 합니다. 큰일인거죠. 이걸 SNS처럼 인터넷 서비스로 만든 것이 바로 Github입니다. Github은 원격 저장소를 회원 가입한 사람 모두에게 무료로 나눠준거죠. 조건이 있다면 저장소를 공개(public)해야 합니다. 비공개(private)로 만들려면 돈을 내야 합니다. 이런 Github의 유료정책을 파고 들어서 [Gitlab][Gitlab]이나 Bitbucket은 무료 비공개 repo를 제공하고 있습니다. 사용법이 좀 다르지만 git과 subvesion을 모두 사용할 수 있으니 선택지가 넓은 셈이죠. 우리는 분석 결과 공유를 목적으로 저장소(repository)를 사용할 계획이니 Github을 사용하겠습니다. 시작해볼까요?\n로컬과 원격, 프로젝트의 시작\n무언가 작업이 발생하면 아주 작거나 간단한 것이 아니라면 프로젝트라고 정의합니다. 원래 분석 프로젝트라고 하면 문제정의 - 데이터 확보 - 분석 - 결과 공유의 과정을 거칩니다. 각각의 세부항목도 많지만 우선은 넘어갈께요. 저 모든 과정을 프로젝트라고 볼 수도 있지만, 우리는 결과 공유만 프로젝트라고 합시다. 더 쉽게 하기 위해서 결과물이 .Rmd 파일로 되어 있다고 해보겠습니다. 그렇게 하면 해야할 일은\ngithub에 새 저장소 만들기\n새 저장소에 결과물 업로드하기\n이제 여기서 몇 가지 분기가 발생하는데요.\ngit을 사용할 것인가 말것인가\n결과물을 어떤 파일 형식으로 저장할 것인가\n입니다.\ngit을 사용하지 않는다면 그냥 github에서 제공하는 upload files 버튼으로 업로드 하는 방법이 있습니다. 예를 들어 .pdf는 엄청 큰 파일이 아닌 이상 업로드하면 바로 웹에서 보여주기도 합니다.\n\n이 주소로 확인하실 수 있습니다. 예쁘지는 않을 수…\n우리는 R을 사용하니 파일 형식은 다양할 수 있습니다. .Rmd만 사용하면 이론적으로는 rpubs 포스트에서 보여드린 만큼이나 가능하죠. 대표적으로 많이 사용하는 형식으로는 .docx같이 MS 오피스 계열의 결과물이 있습니다. 그리고 Github 친화적으로는 .md와 .html을 꼽을 수 있을 것 같습니다.\n.md는 GFM이란게 있을 정도로 Github이 사랑하는 파일 형식입니다. 오픈소스 저장소로써 많이 사용하는 관례인 README.md는 파일을 보지 않아도 프로젝트 페이지에서 출력도 해줍니다.\n.html은 Github pages 서비스를 통해서 사용할 수 있습니다. 아마 다음 포스트를 Github pages를 이용해서 웹페이지를 만들거나 하는 방법을 소개할 수 있을 거라 기대하고 있습니다.\n위 두 파일 형식은 Github 친화적이기도 하면서 변환 동작에 다른 외부 의존성이 없어서 작업환경을 만들기 쉽다는 장점이 있습니다. 예를 들어 .pdf는 Latex 엔진을 추가로 설치해야 합니다. 한글을 지원하는 엔진을 선정해야 해서 KTUG에서 관련 정보를 찾으실 수 있습니다.\n서문이 너무 길었네요. Rstudio를 사용해서 Github 프로젝트를 시작해보겠습니다.\ngit의 워크플로우\n\nGithub!\n위에서 Github이 git의 원격 저장소라는 설명을 드렸습니다. git을 사용해 시작하는 상황은 두 가지입니다.\n처음 폴더를 만들어 로컬 저장소를 초기화하며 시작하기\n기존에 있는 프로젝트를 원격 저장소에서 클론하여 시작하기\n초기화하면서 시작하면 원격 저장소를 연결하는 과정이 추가로 필요합니다. 원격 저장소를 연결하여 파일들을 업로드하는 행위를 푸쉬(push)라고 하는데, 천천히 할 것이라면 초기화로 시작하는 것도 좋은 선택입니다. 원격 저장소를 바로 사용할 것이라면, 원격 저장소를 먼저 만들어 클론하면서 시작하는게 조금 더 제가 생각하는 쉬운 방법입니다. 저는 원격 저장소를 바로 사용할 것이니 클론으로 시작하는 방법을 소개하겠습니다.\n클론(git clone)으로 시작하기\n클론으로 시작하려면 원격 저장소를 먼저 만들어야 한다고 말씀드렸습니다.\n\n로그인을 하고\n\n메인화면에\n\n오른쪽 위 + 버튼을 누르면 메뉴가 나옵니다.\n\n우린 새 저장소 만들어야 하니 New repository를 선택해주세요.\n\n저장소 이름을 myfirstrepo 라고 했습니다. 옵션을 좀 살펴볼까요?\nOwner\n계정입니다. 보통 자기 것만 있는데, 그룹 계정같은 것이 더 있을 수 있습니다.\nRepository name\n저장소 이름입니다. 자신의 계정 내에만 겹치치 않으면 되니 편하게 만들어 주세요.\nDescription\n저장소를 간단히 설명하는 곳입니다. 한 줄 정도로 설명문을 작성하면 검색같은 곳에 같이 보여집니다.\n공개 범위\n공개 범위는 Public과 Private이 있습니다. 우리는 Public은 선택하죠. Private은 비용을 사용해야 합니다.\nREADME\n오픈소스 프로젝트는 관례적으로 root 위치에 README 파일을 두고 있습니다. 여기서 선택하면 저장소 이름을 작성한 README.md 파일을 같이 만들어줍니다. 우리는 선택해서 시작하겠습니다.\n.gitignore\ngit 시스템이 관리하지 않을 파일들의 리스트를 담고 있는 텍스트 파일입니다. 파일명 앞에 .로만 되어 있는 건 숨김 파일이라는 뜻입니다.\n\ngithub에서는 각 언어에서 관례적으로 필요한 .gitignore 리스트를 템플릿으로 제공합니다. 우리도 R로 선택해 볼까요?\nlicense\n저장소의 코드들에 대한 라이선스를 지정할 수 있습니다. 정확히는 .gitignore 파일처럼 주요 라이선스들의 템플릿을 제공합니다.\n\n\n우리는 사용에 제약이 없고 대신 출처만 좀 써달라는 MIT 라이선스로 하겠습니다.\n원격 저장소 만들기\n\n이제 초록 버튼을 눌러 원격 저장소를 만들어 보겠습니다.\n\n우리가 설정했던 .gitignore, LICENSE, README.md 파일 3개가 기본으로 만들어지면서 원격 저장소가 생겼습니다. 이제 이 이 원격 저장소를 이용해 로컬 저장소를 만들겠습니다.\nRstudio 프로젝트 만들기\n\n이제 Rstudio를 켜볼까요?\n\n오른쪽 위에 Project 버튼을 누르면 맨 위에 New Project 버튼이 있습니다. File > New Project 로 진행하실 수도 있어요.\n\n새 프로젝트를 만들면 3가지 버튼이 나옵니다. 하나하나 살펴보죠.\nNew Directory : 새 폴더를 만들면서 프로젝트를 시작합니다. 새 폴더를 만들면서 시작하기 때문에 같은 이름의 폴더가 있으면 에러가 납니다.\nExsting Directory : 기존에 있는 폴더를 프로젝트로 만듭니다. 저는 사용할 일이 많이 없었습니다.\nVersion Control : 버전 관리 시스템으로 프로젝트를 시작합니다.\n\nVersion Control을 선택하겠습니다.\n\ngit과 subversion이 있는데 저희는 git을 사용할껍니다.\n\n아마 git이 설치가 안되어 있는 windows이신 분들은 다음으로 진행이 안됩니다. 링크를 참고해서 git을 설치해주세요.\n\n여기서 다운로드할 수 있습니다.\n\nGit을 설치했는데도 진행이 안되시면 이 포스트를 참고하세요.(업데이트 - 2018.03.19)\n\n\n다시 github으로 돌아와서, 만든 원격 저장소의 URL을 복사합니다. 저는 주소창을 애용하는 편인데, 오른쪽에 초록색 버튼을 눌러도 됩니다.\n\n그러면 주소 오른쪽 버튼이 URL 주소를 복사하는 버튼입니다. 그 버튼을 클릭하고 Rstudio로 돌아오겠습니다.\n\n요 장면으로 다시 오시면 되구요.\n\n이렇게 주소를 Reposigory URL에 붙여넣으시면, 알아서 폴더 이름도 설정됩니다. 보통 저장소 이름과 같게 설정합니다. 생성되는 폴더의 위치를 지정해 줄 수 있는데요. ~/가 문서 폴더를 뜻하구요. 저 같은 경우는 문서 폴더 밑에 project 폴더를 만들어서 그 안에 프로젝트들을 만들어 관리하고 있습니다. 이제 Create project를 눌러보겠습니다.\n\n자 git 명령어를 우리는 모르지만, 저 과정이 git clone https://github.com/mrchypark/myfirestrepo.git을 수행한 것과 같습니다. 명령을 수행한 폴더 위치에 myfirestrepo(오타났네요;;)라는 폴더를 만들고, 그곳에 원격 저장소의 git history와 파일들을 다운로드합니다.\n\n드디어 과정이 끝났습니다. Rstudio의 오른쪽 아래를 보시면 파일 4개(github에서 만든 3개 + .Rproj 파일)가 있는 것을 확인하시면 과정이 잘 끝난겁니다. 몇 가지가 원래랑 좀 다른데요. 하나는 콘솔창의 가장 위에 보이는 작업공간(working directory)이 바뀌었구요. 그냥 프로젝트를 만들 때와 달리 오른쪽 위 패널에 Git 탭이 추가된 것입니다.\ngithub과 연결된 프로젝트\n축하합니다! 드디어 github의 원격 저장소와 연결된 Rstudio 프로젝트를 성공적으로 만들었습니다. 여기까지 따라하셨으면 새로운 프로젝트를 Git으로 관리하면서 원격 저장소로 Github을 사용하는 상태가 되신겁니다. 이제 git으로 버전관리를 하거나 Github에 관련 내용을 올리는 내용을 포스팅해야겠네요.ㄷㄷㄷ 따라 오시는 동안 궁금한 점이나 이상한 점, 잘 안되거나 하는 부분이 있으면 댓글로 알려주세요. 블로그 글이 도움이 되셨다면, 블로그에 도움을 주실 많은 방법이 있습니다. 감사합니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106487787-61c58880-64f6-11eb-8ec6-e210d8403e71.png",
    "last_modified": "2022-04-05T15:16:59+00:00",
    "input_file": {}
  },
  {
    "path": "post/r로나만의-웹페이지-만들기/",
    "title": "[R로나만의] 웹페이지 만들기 1탄 Rpubs",
    "description": "Rmd + RPubs로 웹페이지를 만들 수 있다. github pages 소개하려다 돌린건 안 비밀.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2018-03-09",
    "categories": [
      "R",
      "rpubs",
      "web",
      "html",
      "Rmd",
      "R로나만의"
    ],
    "contents": "\n\n세줄요약\nRmd + RPubs로 웹페이지를 만들 수 있다.\nRstudio에서 하면 쉽다.\ngithub pages 소개하려다 돌린건 안 비밀.\nWeb에 자신의 결과물을 정리하고 공개하는 것은 시간이 가면 갈 수록 그 중요성을 더해 가고 있습니다.\n\n오늘날 웹사이트를 가지지 않은 사람은 존재하지 않는 것이다.\n\n저는 코드 공유 SNS인 Github을 이용해 코드를 공유하고 대화하는 것을 공부하다 github pages에 대해 알게 되었습니다. 거기에 .Rmd 파일은 웹기술에 대한 사전지식 없이 .html 파일로 변환할 수 있었습니다. R 마크다운 + github pages 조합으로 R에서 만들 수 있는 여려 결과물들을 웹으로 공개하여 인터넷 주소로 공유하는 방법이 있는 것입니다. 이건 다음 번에 설명하기로 하고, Rstudio를 이용해서 .Rmd 문서를 .html 파일로 변경하여 웹페이지로 만들어주는 Rpubs라는 서비스를 소개하겠습니다.\nRpubs\n\nRpubs는 Easy web publishing from R라는 말처럼 Rstudio로 .html 파일을 쉽게 무료로 호스팅해주는 서비스입니다. 우리는 .Rmd 파일로 쉽게 .html 파일을 만들 수 있기 때문에, 이걸 이용해볼 겁니다.\n본래 일반적으로 사용하는 포멧은 .md 파일입니다. 판독(pandoc)이라는 오픈소스 프로젝트를 이용해서 여러 다른 문서 포멧으로 변환할 수 있습니다. 아래 그림은 input -> output인데 한번 확인해 보시죠.\n\n이렇게 많은 변환 기능을 제공해주는 판독을 사용해서 마크다운(.md)을 웹문서(.html)로 변환할 겁니다.\n우리는 knitr 패키지를 이용해서 .Rmd 문서를 .md 파일로 바꾸고, 판독을 이용해서 원하는 다양한 포멧(이번 경우는 .html)으로 바꿉니다.\n\n내부 동작은 이 정도로 가볍게 넘기고, Rstudio를 이용해서 .Rmd 파일을 만들고 저장하고, .html 파일로 바꿔보겠습니다.\n그럼 이제 Rstudio를 실행해 볼까요?\n<img src=“https://user-images.githubusercontent.com/6179259/37238875-1b273872-2473-11e8-8278-40edfd2aff12.PNG”, width=100%>\n새로 파일을 만드는 방법이 몇 가지 있지만, 우리는 아래 방법을 시도해 볼겁니다.\n\nRstudio에서 File 버튼 밑에 새로 만들기 버튼을 누릅니다. 우리가 만들건 R Markdown 입니다.\n\n필요한 패키지가 설치안 안되어 있는데, 설치할꺼냐고 물어보네요! 당연히 Yes를 눌러 패키지들을 설치해줍니다.\n\n패키지가 설치되고 있습니다. 글자가 깨진 부분은 기능에는 이상이 없으니 우선은 넘어가겠습니다. 다음에 기회되면 한번 파보겠습니다.\n\n드디어 Rmd 파일을 만드는 창이 열렸습니다. 많은 옵션이 있지만 저희는 기본으로 진행하려고 하니, 바로 OK를 눌러주세요.\n\n간단한 기능 설명이 포함되있는 문서가 만들어졌습니다. 그럼 간단하게만 구조를 확인해 볼까요?\n\n우선 화면 내에 드래그 한 부분이 YAML header 입니다. YAML은 JSON, XML 같은 양식의 일종입니다. 마크다운에는 header와 body 두 공간이 있습니다. 물론 대부분의 마크업이 같은 구성을 가지고 있습니다. header는 변환하기 위한 설정들을 작성하는 공간입니다. 지금 화면에서는 html문서를 변환결과로 하겠다고 작성한 것입니다. 여기에서 html로 변환할 때의 다양한 옵션을 확인하세요. html 문서 이외에 다른 포멧들의 옵션도 설명이 잘되어 있습니다.\n\nbody 부분은 전부 markdown 문법을 그대로 지원합니다. 문법 설명은 정말 많이 있으니 한 번 확인해보세요. .Rmd는 코드 덩어리에서 R 코드를 실행하고 결과를 함께 .md로 변환해줍니다. 그래서 코드 덩어리 부분 문법만 확인하면 됩니다. 그 문법도 지금 범위는 아니니 레퍼런스를 확인해주세요!\n\n편집 공간의 왼쪽 위에 보면 Knit 버튼이 있습니다. Knit를 바로 누르면 header에 작성한 output 양식에 따라 바로 변환을 진행하구요. Knit 버튼의 화살표를 클릭하면 위의 이미지와 같이 선택할 수 있는 옵션들이 나옵니다. 우리는 .html이 되어야 하므로, 가장 위에 Knit to HTML을 클릭해 보겠습니다.\n\nKnit 과정은 저장이 완료된 파일을 기준으로 변환을 진행하기 때문에 파일이 온전히 저장된 상태여야 합니다. .Rmd 파일을 저장하면 바로 변환 작업을 시작하며, 완료되면 팝업창으로 결과를 보여줍니다.\n\n팝업창을 같이 확인해볼까요? 제일 위에 파일 이름을 보니 test.html로 .html 확장자인 것을 확인할 수 있습니다. 팝업창은 기능이 제한적인 브라우저이므로 Open in Browser 버튼으로 크롬이나 익스플로러에서 파일을 확인할 수 있습니다.\n\n드디어 Publish 버튼입니다. 처음 클릭하면 역시 추가 패키지 설치를 묻는 창이 나오네요. 이전 것도 마찬가지지만 한번 설치하면 다시 물어보지 않습니다. Yes로 설치를 진행해 주세요.\n\nPublish는 두 곳이 가능합니다. 드디어 제가 소개해드린 RPubs를 선택할 수 있게 되었네요. 제 눈에는 free service가 크게 들여옵니다. ㅎㅎ RStudio Connect는 더 다양한 기능을 제공하는 방법(shiny 등)이면서 기업 라이선스에서 많이 사용하는 방법입니다. RPubs를 선택하겠습니다.\n\n경고를 한번 해주는군요. Rpubs는 무료 서비스이기 때문에 모든 사용자에게 공개되는 서비스입니다. 문서를 무료로 웹서비스에 올릴 수 있지만, 제한적인 공개가 어렵다는 단점이 있군요. 신기하게도 검색에도 잘 걸리는 편입니다. 파워포인트 형태의 결과물을 공유하는 slideshare와 비슷하게 보고서 형식의 문서를 공유하는 서비스라고 생각하면 좋을 것 같습니다.\n\nPublish 버튼으로 드디어 문서를 업로드합니다. 두구두구두구두구둥!\n\n브라우저 창이 열리면서 로그인과 회원가입을 선택하는 페이지가 열립니다. 회원가입으로 같이 따라가 볼까요? 로그인을 하면 바로 두 번째 스탭으로 넘어갑니다.\n\n회원가입은 간단합니다. 아이디 역할을 할 email 주소, 문서상 공개될 Username, 이름과 비밀번호 , 비밀번호 확인입니다. 회원가입을 해주세요.\n\n드디어 스텝 2 입니다. 문서의 제목과 설명을 설정할 수 있습니다. Slug라는 생소한 단어가 눈에 띕니다. 간단하게는 문서의 인터넷 주소라고 생각하면 좋습니다. 아무것도 설정하지 않으면 무작위 숫자로 자동 생성해줍니다. 저는 비운 채로 넘어가겠습니다.\n\n짜잔! 축하합니다. 저와 같은 과정을 따라오셨다면 거의 비슷한 문서가 웹주소를 가진 상태로 세상에 공개되었을 겁니다. 예시는 그대로 공개해 두었으니 확인해보세요. http://rpubs.com/test_user0375/368575 링크를 클릭하셔도 좋습니다.\n오른쪽 아래에 댓글 기능인 Comments, 공유하는 Share, 문서보기 모드인 Hide Toolbars를 선택할 수 있습니다. 문서보기 모드가 많이 쓰일 것 같군요.\n데이터 분석에 있어 결과의 공유는 매우 중요합니다. 특히 과학적 방법에 대한 설명과 재현성 확보를 통한 신뢰도 구축은 코드를 통한 문서화만이 달성할 수 있는 목표입니다. 물론 데이터 공유 방법이나 다른 것들이 받침되어야 하겠습니다.\nR markdown 문서를 웹으로 공유해서 좋은 분석가가 되어 보는 것은 어떤가요?\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106486781-59208280-64f5-11eb-81cb-183510282c73.png",
    "last_modified": "2022-04-05T15:17:15+00:00",
    "input_file": {}
  },
  {
    "path": "post/blogdown으로-블로그-이사하기/",
    "title": "blogdown으로 블로그 이사하기",
    "description": "탈도 많았던 blog의 engine 이전을 완료했습니다. 사용하는 테마가 바뀌긴했지만, 그래도 지금 테마가 어느 정도 만족스러워 결정하게 되었습니다. 원래 `jekyll`로 작성한 블로그에서 `blogdown(Hugo)`으로 변경하였는데요. ...",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2018-03-06",
    "categories": [
      "blog",
      "blogdown",
      "hugo",
      "minimal",
      "rstudio"
    ],
    "contents": "\n\n탈도 많았던 blog의 engine 이전을 완료했습니다. 사용하는 테마가 바뀌긴했지만, 그래도 지금 테마가 어느 정도 만족스러워 결정하게 되었습니다. 원래 jekyll로 작성한 블로그에서 blogdown(Hugo)으로 변경하였는데요. blogdown은 rstudio의 수석 엔지니어인 Yihui Xie가 golang으로 작성된 static site generator 입니다. jekyll 또한 같은 범주의 도구이죠.\n그동안 jekyll을 사용한 이유\njekyll은 간단함, 자유로운 테마 선택, 간단함 때문에 사용했습니다.\njekyll의 간단함\njekyll 블로그는 Github 계정만 있으면 아이디.github.io라는 주소로 쉽게 만들 수 있습니다! jekyll-now를 포크하고, pages 설정만 하면 끝납니다.\njekyll은 지향점이 text를 블로그로 바꿔라! 입니다. 덕분에 매우 쉬운 도구가 되었죠. .md 파일을 블로그 포스트에 해당하는 형태로 운영할 수 있게 해줍니다.\nGithub는 ruby라는 언어로 개발되었다고 합니다. 공교롭게도(!) jekyll도 ruby로 작성되어 있죠. 그래서 Github에서 제공하는 pages라는 서비스에서 jekyll를 빌드없이 바로 사용할 수 있습니다. 물론 .Rmd를 .md로 렌더링하는 과정이 필요하기 때문에 R로 블로깅할 때는 아쉬운 대목입니다.\n자유로운 테마 선택\njekyll은 static site generator로써 가장 유명한 도구 입니다. staticgen을 확인해보면 압도적인 스타수를 확인할 수 있습니다. 다음 인기 있는 도구가 Hugo군요. 최근에는 Gatsby도 인기있다고 들었습니다.\n아무튼… jekyll이 가장 인기있고 역사도 있는 만큼 선택할 수 있는 테마의 범위가 가장 넓습니다. jekyllthemes라는 곳에서 잘 모아져 있는 테마들을 구경할 수 도 있고, 따로 만들어진 테마들을 검색해서 찾을 수도 있습니다. 저는 Lagrange라는 테마를 선택했었습니다. 설명이 매우 잘 되어 있고(물론 영어입니다…), 사진 첨부가 기능으로 들어가 있어서 이름만 정해주면 되었고, 결정적으로 디자인이 너무 마음에 들었습니다.\n\njekyll의 간단함\n특별히 동작과정을 이해하려는 노력을 할 것이 아니라면 공부해야 할 부분은 _config.yml 파일입니다.\n# Site Settings\ntitle:               Mrchypark\ntagline:             log for you & me\ndescription:\nbaseurl:            #\"/Lagrange\"\nurl:                #\"https://lenpaul.github.io\"\ngithub:\n  url:               #\"https://lenpaul.github.io/Lagrange\"\nauthor:\n  name:              \"박찬엽\"\n  email:             \"mrchypark@gmail.com\"\n  twitter:           \"mrchypark_\"\n  instagram:         \"mrchypark\"\n  github:            \"mrchypark\"\n  facebook:          \"mrchypark\"\n  linkedin:          \"chanyub.park\"\nnavigation:\n- title: Materials\n  url: /materials\n- title: Index\n  url: /index\n- title: About\n  url: /about\n\n\npaginate:            5\ndisqus:              \"mrchy****\"\nga:                  \"UA-478*****-**\"\n\n# Build settings\nmarkdown:            kramdown\nhighlighter:         rouge\npermalink:           none\ngems:                [jekyll-paginate]\nencoding:            \"UTF-8\"\n이건 기존의 jekyll로 블로그를 만들 때 사용한 _config.yml 파일입니다. 테마가 친절한 편이여서 여러 SNS에 대한 링크를 아이디만 넣어주면 바로 예쁘게 사용할 수 있게 설정해 줍니다. 댓글을 위한 disqus나 GA 또한 ID만으로 연결을 해줍니다.\njekyll에서 blogdown으로\n당연히도 jekyll은 R파베틱(Rphabetic)하지 않기 때문입니다. 물론 Hugo라고 R파베틱한 것은 아니지만, 패키지화되어 있다는 점이 Rstudio와의 호환성을 많이 올려줍니다.\nblogdown은 staticgen에서 두번째를 차지하고 있는 Hugo를 R 패키지화한 도구입니다. Rstudio의 Addin으로 사이트 구축, 새포스트 쓰기 등의 기능도 지원하고 build_site() 명령어 한방으로 docs 폴더에 블로그 구축을 완전히 끝내줍니다. Hugo가 빠른 블로그라는 점도 한 몫했네요.\nblogdown은 설명서가 친절하다 - blogdown을 만든 사람은 bookdown을 만든 사람이기도 합니다. 덕분에 자세한 메뉴얼이 온라인 책으로 준비되어 있기도 합니다.\nrstudio와 호환이 좋다 - 아무래도 일하는 곳에 도구를 지원하는 방식으로 패키지를 작성한 것 같습니다. Addin 기능 뿐만 아니라 Rstudio를 블로그 글쓰기 에디터로 사용하는데 부족함 없게 지원합니다. 물론 버전이 오르면서 한글 문제(정확하게는 중국어 문제)가 해결된 이유도 있습니다.\n빠르다 - 신기하게 Hugo로 넘어간 많은 분들이 jekyll가 느려지는 문제를 지적하였습니다. 제 블로그가 글이 많지는 않지만 미래를 대비하고자 하는 마음도 있었습니다.\n다시 도구 이전 신고\n네, 블로그를 blogdown으로 이전하였습니다. 추후 시간이 되면 blogdown으로 블로그를 만드는 법에 대해서 포스팅하도록 하겠습니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106467983-b52cdc00-64e0-11eb-9f46-1f97f8abf56b.png",
    "last_modified": "2022-04-05T15:16:55+00:00",
    "input_file": {}
  },
  {
    "path": "post/rphabetic-알파베틱-제안/",
    "title": "Rphabetic(알파베틱) 제안",
    "description": "사용자 친화적 혹은 사용자가 이용하기 쉬운 을 개인적으로는 `Rphabetic`하다고 표현하려 합니다.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2018-03-06",
    "categories": [
      "suggest",
      "R",
      "term"
    ],
    "contents": "\n\nPython 공부를 하면서 재밌으면서도 직관적인 단어를 알게 되었는데, Pythonic way입니다. 말하지 않아도 파이썬스러운 방법이라는 뜻이라는게 한눈에 들어오더라구요. Pythonic 하다, 하지 않다로도 많이 사용하는 것을 봤습니다.\n그래서 R에서는 비슷한 단어가 없는건가 싶더라구요. 찾아보니 R's way가 있었습니다만, 힙하지 않아 보였습니다.(힙이라니…)\n아무튼 한국 R 유저 그룹에 글을 올려 의견을 물었습니다. 제가 R-legant하다를 먼저 제시하면서 다른 분들도 많은 의견을 주셨습니다. 그러다가 역시 조금은 억지스러운가 라는 생각이 들었는데요. Rcoholic 같이 발음으로도 좀 더 자연스러워야하지 않은가 싶더라구요.\n고민 끝에 개인적으로는 Rphabetic하다고 표현하려 합니다.\n굳이 정의하자면, 사용자 친화적 혹은 사용자가 이용하기 쉬운 이라고 하면 어떨까요. 전에 리디북스의 분석가이신 하헌철님께서 언급해주신 R의 철학에 가까운 의미이지 않나 생각이 듭니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106484489-0219ae00-64f3-11eb-8312-f4f6f8907adb.png",
    "last_modified": "2022-04-05T15:17:04+00:00",
    "input_file": {}
  },
  {
    "path": "post/materials-페이지-업데이트/",
    "title": "Materials 페이지 업데이트",
    "description": "제 블로그 왼쪽 위에 Materials라는 메뉴를 추가하였습니다.",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2017-11-22",
    "categories": [
      "news",
      "blog",
      "materials"
    ],
    "contents": "\n\n제 블로그 왼쪽 위에 Materials라는 메뉴가 있습니다. 작성하는 자료들을 모아 놓는 공간으로 따로 분류해 두었었는데, 그동안 만든 자료들이 좀 있어서 내용을 업데이트했습니다.\n짧게 소개하면 제가 패스트 캠퍼스에서 진행했던 강의 자료와 R로 api 서버 만들기, 크롤링 하기, github 함께 사용하기 같은 발표자료를 링크해 두었습니다.\n혹시 살펴보시다가 이야기해주실 부분에 대해서는 언제든지 어떤 체널로든 피드백 부탁드립니다.\n감사합니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106466661-f9b77800-64de-11eb-807d-fcedbfbc1df0.png",
    "last_modified": "2022-04-05T15:17:02+00:00",
    "input_file": {}
  },
  {
    "path": "post/한글-띄어쓰기-api-이용하기/",
    "title": "한글 띄어쓰기 API 이용하기",
    "description": "현재 아래 소개하는 api는 동작하지 않으며 KoSpacing패키지가 새롭게 배포되었습니다.\n패키지 사용 환경 설정은 본 블로그의 다른 포스트를 참고하세요.\nKoNLP 패키지를 만드신 고감자님께서 KoNLP에 한글 자동 띄어쓰기 기능을 추가하시기 위해서 관련 연구를 수행하시고 우선 결과물로 웹 요청으로 결과를 제공하는 API를 우선 공개하셨습니다....",
    "author": [
      {
        "name": "Chanyub Park",
        "url": "https://mrchypark.github.io/about"
      }
    ],
    "date": "2017-10-09",
    "categories": [
      "R",
      "httr",
      "api",
      "server",
      "POST",
      "GET"
    ],
    "contents": "\n\nContents\n업데이트\n띄어쓰기 api 요청하기\nhttp 란\nR로 http 요청하기\n\n\n\n업데이트\n현재 아래 소개하는 api는 동작하지 않으며 KoSpacing 패키지가\n새롭게 배포되었습니다.\n패키지 사용 환경 설정은 본 블로그의 다른\n포스트를 참고하세요.\nKoNLP 패키지를\n만드신 고감자님께서 KoNLP에 한글\n자동 띄어쓰기 기능을 추가하시기 위해서 관련\n연구를 수행하시고 우선 결과물로 웹 요청으로 결과를 제공하는 API를\n우선 공개하셨습니다.(관련글) 사용법도 함께\n공개하셨는데, R에서는 사용이 어색할 수 있는 reticulate 패키지로\n예시를 작성해주셔서 R에서 많이 사용하는 패키지들로 예시코드를 공유하면서\n웹 요청에 대한 내용도 함께 공유해볼까 합니다.\n띄어쓰기 api 요청하기\n먼저 공유해주신 코드를 살펴보겠습니다.\nlibrary(reticulate)\n\nrequests <- import('requests')\n\nspaced_sent <- requests$put('http://35.201.156.140:8080/spacing', \n      data=list(sent=\"아래와같은방식으로API를사용할수있으며,호출건수에대해서별도의제한은없으나,1회 호출에200글자로글자수를제한하고있다.\"))$json() \n\nprint(spaced_sent$sent)\nreticulate는 파이썬 코드를 R에서 사용할 있게 interface 해주는\n패키지로 위 코드를 실행하기 위해서는 reticulate 패키지, 파이썬, 파이썬의\nrequests 패키지가 필요합니다. 그럼 R에서 웹 요청을 보내기 좋은 httr 패키지로 코드를\n바꿔보겠습니다.\nif (!requireNamespace(\"httr\")) install.packages(\"httr\")\nlibrary(httr)\n\nbody<-list(sent=\"아래와같은방식으로API를사용할수있으며,호출건수에대해서별도의제한은없으나,1회 호출에200글자로글자수를제한하고있다.\")\nres<-PUT(url='http://35.201.156.140:8080/spacing', body=body)\n\ncontent(res)$sent\n## [1] \"아래와 같은 방식으로 API를 사용할 수 있으며, 호출 건수에 대해서 별도의 제한은 없으나, 1회 호출에 200글자로 글자수를 제한하고 있다. \"\n관련 기능을 만드실 때 고감자님에게 도움을 드린 것이 있는데 직접\n언급해주셨습니다. 다시 한번 감사드립니다. 아래로는 http란, R에서 간단한\n크롤링이나 api를 사용하기 위한 패키지 소개 및 간단한 사용 예시가\n작성되어 있습니다.\nhttp 란\nhttp란 보통 1999년에 발표된 http/1.1 버전을 뜻합니다.\n해당 링크에서 보면 프로토콜이란\n하나의 약속입니다. 브라우저와 서버가 서로 데이터를 주고 받기 위해서 만든\n규칙이라고 이해하시면 좋습니다. 그렇다면 웹의 정보를 R에서 가져오기\n위해서는 서버에게 브라우저가 요청하는 약속을 그대로 따라하면 좋을 것\n같습니다.\nR로 http 요청하기\nhttp로 요청하는 다양한 방법이 있지만, 간단하게는 GET과 POST만\n이해하시면 됩니다. 서버에게 요청하는 것은 request, 응답을 받는 것은\nresponse라고 하겠습니다.__(그놈의 영어)__ 우선 GET부터 보겠습니다.\nGET 요청\nGET은 서버의 주소만으로 서버에 데이터를 요청하는 방법입니다. 대부분의\n브라우저에 주소를 입력하고 엔터를 누르는 것과 같습니다. GET이라는 것을\n메소드라고 부릅니다. R에서는 http 요청을 하기 위한 다양항 패키지가\n있지만 메소드 이름을 바로 함수로 제공하는 httr 패키지를\n사용하겠습니다.\n\n\nif (!requireNamespace(\"httr\")) install.packages(\"httr\")\nlibrary(httr)\nres<-GET(\"https://mrchypark.github.io/\")\ncontent(res)\n\n\n{html_document}\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n[1] <head>\\n<meta http-equiv=\"Content-Type\" content=\"text/html; cha ...\n[2] <body class=\"layout-listing\">\\n\\n<!--radix_placeholder_front_ma ...\n\n위의 결과에서 <html>이라고 나온 것을 볼 수\n있습니다. html는 css,\njavascrit와 함께 브라우저가 사람들이 볼 수 있는 그림을 그리도록 만들어진\n규칙입니다. GET 요청은 대부분 서버에서 이런 html 문서를 데이터로 받기\n위해서 브라우저에서 동작하는 방식입니다. 알고 계신 다른 사이트들을\n시도해보시면 더 이해가 좋을 것 같습니다. 이 html 문서에서 필요한 곳의\n내용만 추출하는 패키지로 rvest\n패키지가 있습니다. rvest 패키지 사용법은 많은 분들이 소개해주셔서\n검색해 보시길 추천드립니다.\nPOST 요청\nPOST는 서버에 데이터를 요청할 때 뭔가 값을 함께 요청하는 방식입니다.\n대표적으로 로그인이 있습니다. 위 고감자님의 요청은 PUT을 사용했는데,\nPOST와 거의 같습니다. POST를 값을 실어보내는 것을 body라고 합니다.\nbody는 R에서는 list 자료형으로 처리합니다.\n\n\nbody<-list(sent=\"아래와같은방식으로API를사용할수있으며,호출건수에대해서별도의제한은없으나,1회 호출에200글자로글자수를제한하고있다.\")\nbody\n\n\n$sent\n[1] \"아래와같은방식으로API를사용할수있으며,호출건수에대해서별도의제한은없으나,1회 호출에200글자로글자수를제한하고있다.\"\n\n위 띄어쓰기 API 요청을 보면 body를 선언하는 부분이\nlist로 되어 있고, 데이터는 띄어쓰기가 필요한 문장, 그\n이름을 sent로 하였습니다. 이건 서버에 sent라는\n이름으로 띄어쓰기가 필요한 문장을 함께 전달하기 위해서 선언한\n겁니다.\nPUT은 POST와 거의 같다고 했습니다. 여기서는\n예시를 PUT으로 하겠습니다.\nres<-PUT(url='http://35.201.156.140:8080/spacing', body=body, verbose())\n위는 PUT요청을 했을 때 일어나는 일들 전체를 보여줍니다.\nhttr 패키지가 다 알아서 해주니 우리는 이제 아래처럼\n요청하면 됩니다.\nres<-PUT(url='http://35.201.156.140:8080/spacing', body=body)\nres는 PUT 요청으로 서버에게 요청을 했을 때\n서버가 우리에게 돌려준 결과를 저장하였습니다. 위에서 말한\nresponse입니다.\nres\n## Response [http://35.201.156.140:8080/spacing]\n##   Date: 2018-03-05 07:15\n##   Status: 200\n##   Content-Type: application/json\n##   Size: 348 B\n## {\"sent\": \"\\uc544\\ub798\\uc640 \\uac19\\uc740 \\ubc29\\uc2dd\\uc73c\\ub85c API\\u...\n실제로 값에 response라고 하면서 여러 정보를 보여주고\n있습니다. 어느 서버 주소에서 받은 것인지, 언제 받았는지, 상태는 얼마인지\n받은 데이터가 어떤 것인지, 받은 데이터의 크기가 얼마나 되는지 같은\n것들이네요. 하나하나 따져 보시려면 str(res)를 수행해보시면\n좋을 것 같습니다. http가 response를 어떻게\n정의해 놨는지 알 수 있습니다.\n이 중에서 우리가 궁금한 것은 content입니다.\nhttr 패키지는 response 객체에서\ncontent만 보는 기능을 content() 함수로\n제공하고 있습니다. content()함수는 몇몇 유명한 형식에\n대해서 자동으로 가져오는 기능을 제공합니다.\ncontent(res)\n## $sent\n## [1] \"아래와 같은 방식으로 API를 사용할 수 있으며, 호출 건수에 대해서 별도의 제한은 없으나, 1회 호출에 200글자로 글자수를 제한하고 있다. \"\ncontent에 json 방식으로 준 모양입니다. R은\njson 방식의 데이터를 list 자료형으로\n해석합니다. json의 설명을\n확인해 보세요. list 이름이 sent인걸 보니\n마지막 단계만이 남았습니다.\ncontent(res)$sent\n## [1] \"아래와 같은 방식으로 API를 사용할 수 있으며, 호출 건수에 대해서 별도의 제한은 없으나, 1회 호출에 200글자로 글자수를 제한하고 있다. \"\nresData<-content(res)\nresData$sent\n## [1] \"아래와 같은 방식으로 API를 사용할 수 있으며, 호출 건수에 대해서 별도의 제한은 없으나, 1회 호출에 200글자로 글자수를 제한하고 있다. \"\nOpen API 라고 되어 있는 서비스들이 위와 같은 방식을 사용하고\n있습니다. 보통은 sent라고 되어 있는 부분(요청시 body로\n선언할 내용과 방법)을 서비스 제공자 쪽에서 설명해줘야 합니다. 다른 API\n서비스를 사용하실 때 오늘의 내용이 도움이 되었으면 합니다.\n끝까지 읽어주셔서 감사합니다. 질문, 지적 대환영이며 댓글로\n부탁드립니다.\n\n\n\n",
    "preview": "https://user-images.githubusercontent.com/6179259/106461744-8c084d80-64d8-11eb-93a4-ebedf3fb21c7.png",
    "last_modified": "2022-04-05T01:42:36+00:00",
    "input_file": {}
  }
]
